<!DOCTYPE html>
<html lang="tr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Yakıt Takip Sistemi</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
      body {
        font-family: 'Inter', sans-serif;
      }
      @keyframes gifFlyOverLeft {
        0%, 41.6% { opacity: 0; transform: translate(0, 0); } /* 5s hidden */
        42% { opacity: 0.2; transform: translate(0, 0); } /* Start animation */
        91.5% { opacity: 0.2; transform: translate(50px, -40px); } /* Keep visible until end of flight */
        91.6% { opacity: 0; transform: translate(50px, -40px); } /* Disappear instantly at end position */
        100% { opacity: 0; transform: translate(0, 0); } /* Reset for next cycle */
      }
      @keyframes gifFlyOverRight {
        0%, 41.6% { opacity: 0; transform: translate(0, 0); } /* 5s hidden */
        42% { opacity: 0.2; transform: translate(0, 0); } /* Start animation */
        91.5% { opacity: 0.2; transform: translate(-50px, -40px); } /* Keep visible until end of flight */
        91.6% { opacity: 0; transform: translate(-50px, -40px); } /* Disappear instantly at end position */
        100% { opacity: 0; transform: translate(0, 0); } /* Reset for next cycle */
      }
      .animated-gif-left {
        animation: gifFlyOverLeft 12s infinite linear;
      }
      .animated-gif-right {
        animation: gifFlyOverRight 12s infinite linear;
      }
      .embedded-shadow {
        box-shadow: inset 0 0 12px 4px rgb(0 0 0 / 0.5);
      }
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
      .animate-fadeIn {
        animation: fadeIn 1s ease-in-out forwards;
      }
      @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
      }
      .animate-fadeOut {
        animation: fadeOut 1s ease-in-out forwards;
      }
    </style>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            'ogm-green': {
              '50': '#f0f7f2',
              '100': '#e0f0e5',
              '200': '#c7e3d1',
              '300': '#a4d1b6',
              '400': '#7eb897',
              '500': '#5f9e7a',
              '600': '#478161',
              '700': '#3a6a51',
              '800': '#315643',
              '900': '#294637',
              '950': '#15251d',
            },
          }
        }
      }
    }
  </script>
  <script type="importmap">
{
  "imports": {
    "xlsx": "https://aistudiocdn.com/xlsx@^0.18.5",
    "react": "https://aistudiocdn.com/react@^19.1.1",
    "react-dom/client": "https://aistudiocdn.com/react-dom@^19.1.1/client",
    "jspdf": "https://aistudiocdn.com/jspdf@^2.5.1",
    "jspdf-autotable": "https://aistudiocdn.com/jspdf-autotable@^3.8.2",
    "react/": "https://aistudiocdn.com/react@^19.1.1/",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.1.1/"
  }
}
</script>
</head>
  <body style="background-image: url('https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExNXRlNWZpNWQwajl5dnMzbnFieGJ6bmZpOW54NGg5YmFxY3NhbHQwbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/zsMlIC5Hduwe4IfYQS/giphy.gif');" class="bg-cover bg-center bg-fixed">
    <div id="root"></div>
    <script type="module">
import React, { useState, useEffect, useMemo, useRef, useCallback } from 'react';
import ReactDOM from 'react-dom/client';
import * as XLSX from 'xlsx';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

// From constants.ts
const SCRIPT_URL = "https://script.google.com/macros/s/AKfycbzKktc_Ih2H0buQMBrfN2wZdV5Ys1pnDLwF2j-hJtU0y0Tx6TcfwLOb-1mYE1mPwla_Bw/exec";

const VIEW_FUEL_ENTRY = 'fuelEntry';
const VIEW_SEARCH_RECORDS = 'searchResults';
const VIEW_ADMIN_PANEL = 'adminPanel';

const FIELD_TRANSLATIONS = {
    // General
    id: 'ID',
    date: 'Tarih',
    kayitNumarasi: 'Kayıt No',
    recordType: 'Kayıt Tipi',
    receiptNumber: 'Makbuz Numarası',
    fuelAmount: 'Yakıt Miktarı (lt)',
    locationType: 'İkmal Tipi',
    location: 'Konum / İkmal Yeri',

    // Personnel Specific
    personnelId: 'Personel ID',
    personnelName: 'Personel Adı',
    jobTitle: 'Mesleği',
    tailNumber: 'Kuyruk Numarası',
    cardNumber: 'Kart Numarası',

    // Tanker Specific
    tankerPlate: 'Tanker Plakası',
    airport: 'Hava Limanı',
    receivingTankerPlate: 'Yakıtı Alan Tanker',
    fillingTankerPlate: 'Yakıtı Veren Tanker',

    // Request Specific
    requesterName: 'Talep Eden',
    timestamp: 'Talep Zamanı',
    originalRecord: 'Orijinal Kayıt',
    requestedChanges: 'Talep Edilen Değişiklikler',
};

const RECORD_TYPE_TRANSLATIONS = {
    personnel: 'Hava Aracı İkmal',
    tankerDolum: 'Tanker Dolum',
    tankerTransfer: 'Tanker Transfer'
};


const INITIAL_PERSONNEL_LIST = [
    { id: 'p1', name: 'Ahmet Yılmaz', job: 'Pilot' },
    { id: 'p2', name: 'Ayşe Kaya', job: 'Pilot' },
    { id: 'p3', name: 'Mehmet Demir', job: 'Şoför' },
    { id: 'p4', name: 'Fatma Öztürk', job: 'Şoför' },
];
const AIRCRAFT_TYPES = [
    'MI-8', 'T-70', 'KA-32', 'CH-47', 'CH-47 ER', 'AT-802F', 'S-64',
    'AS350', 'AN-32P', 'AW119', 'AS-532', 'Be-200', 'Bell-429', 'Citation', 'B-360'
];
const INITIAL_AIRPORT_LIST = [
    { id: 'ada', name: 'Adana Şakirpaşa Havalimanı (ADA)', type: 'Sivil' },
    { id: 'adf', name: 'Adıyaman Havalimanı (ADF)', type: 'Sivil' },
    { id: 'aji', name: 'Ağrı Ahmed-i Hani Havalimanı (AJI)', type: 'Sivil' },
    { id: 'mzh', name: 'Amasya Merzifon Havalimanı (MZH)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'esb', name: 'Ankara Esenboğa Havalimanı (ESB)', type: 'Sivil' },
    { id: 'ank-ask-1', name: 'Ankara Mürted Hava Meydan Komutanlığı', type: 'Askeri' },
    { id: 'ayt', name: 'Antalya Havalimanı (AYT)', type: 'Sivil' },
    { id: 'edo', name: 'Balıkesir Koca Seyit Havalimanı (EDO)', type: 'Sivil' },
    { id: 'bzi', name: 'Balıkesir Merkez Havalimanı', type: 'Askeri' },
    { id: 'bal', name: 'Batman Havalimanı (BAL)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'bgg', name: 'Bingöl Havalimanı (BGG)', type: 'Sivil' },
    { id: 'yei', name: 'Bursa Yenişehir Havalimanı (YEI)', type: 'Sivil' },
    { id: 'ckz', name: 'Çanakkale Havalimanı (CKZ)', type: 'Sivil' },
    { id: 'dnz', name: 'Denizli Çardak Havalimanı (DNZ)', type: 'Sivil' },
    { id: 'diy', name: 'Diyarbakır Havalimanı (DIY)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'ezs', name: 'Elazığ Havalimanı (EZS)', type: 'Sivil' },
    { id: 'erc', name: 'Erzincan Yıldırım Akbulut Havalimanı (ERC)', type: 'Sivil' },
    { id: 'erz', name: 'Erzurum Havalimanı (ERZ)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'aoe', name: 'Eskişehir Hasan Polatkan Havalimanı (AOE)', type: 'Sivil' },
    { id: 'esk-ask-1', name: 'Eskişehir 1. Ana Jet Üs Komutanlığı', type: 'Askeri' },
    { id: 'gzt', name: 'Gaziantep Oğuzeli Havalimanı (GZT)', type: 'Sivil' },
    { id: 'hty', name: 'Hatay Havalimanı (HTY)', type: 'Sivil' },
    { id: 'ise', name: 'Isparta Süleyman Demirel Havalimanı (ISE)', type: 'Sivil' },
    { id: 'isl', name: 'İstanbul Atatürk Havalimanı (ISL)', type: 'Sivil' },
    { id: 'ist', name: 'İstanbul Havalimanı (IST)', type: 'Sivil' },
    { id: 'adb', name: 'İzmir Adnan Menderes Havalimanı (ADB)', type: 'Sivil' },
    { id: 'izm-ask-1', name: 'İzmir Çiğli 2. Ana Jet Üs Komutanlığı', type: 'Askeri' },
    { id: 'ltfb', name: 'İzmir Selçuk-Efes Havalimanı (LTFB)', type: 'Sivil' },
    { id: 'ksy', name: 'Kars Harakani Havalimanı (KSY)', type: 'Sivil' },
    { id: 'asr', name: 'Kayseri Erkilet Havalimanı (ASR)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'kya', name: 'Konya Havalimanı (KYA)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'mlx', name: 'Malatya Havalimanı (MLX)', type: 'Askeri' }, // Askeri/Sivil ortak
    { id: 'szf', name: 'Samsun Çarşamba Havalimanı (SZF)', type: 'Sivil' },
    { id: 'vas', name: 'Sivas Nuri Demirağ Havalimanı (VAS)', type: 'Sivil' },
    { id: 'tzx', name: 'Trabzon Havalimanı (TZX)', type: 'Sivil' },
    { id: 'van', name: 'Van Ferit Melen Havalimanı (VAN)', type: 'Sivil' },
    { id: 'onq', name: 'Zonguldak Çaycuma Havalimanı (ONQ)', type: 'Sivil' },
];

const generateRecordNumber = () => {
    return 'ID-' + new Date().toISOString();
};

const formatDisplayDate = (dateString) => {
    if (!dateString) return '-';
    const cleanDateString = String(dateString).startsWith('ID-') ? dateString.substring(3) : dateString;

    const date = new Date(cleanDateString);
    if (isNaN(date.getTime())) {
        return dateString;
    }
    return date.toLocaleString('tr-TR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    }).replace(',', '');
};

const formatDisplayDateOnly = (dateString) => {
    if (!dateString) return '-';
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
        const parts = String(dateString).split(' ')[0].split('.');
        if (parts.length === 3) {
            const recheckDate = new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
            if (!isNaN(recheckDate.getTime())) {
                return `${parts[0]}.${parts[1]}.${parts[2]}`;
            }
        }
        return dateString;
    }
    return date.toLocaleDateString('tr-TR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
    });
};

const parseSheetDate = (dateValue) => {
    if (dateValue === null || dateValue === undefined) return null;

    if (typeof dateValue === 'number' && dateValue > 1) {
        const utcDate = new Date(Math.round((dateValue - 25569) * 86400 * 1000));
        const localDate = new Date(utcDate.getTime() + (utcDate.getTimezoneOffset() * 60000));
        return localDate.toISOString().split('T')[0];
    }

    const dateStr = String(dateValue);
    let date = new Date(dateStr);

    if (isNaN(date.getTime())) {
        const parts = dateStr.split(' ')[0].split(/[.\/-]/);
        if (parts.length === 3) {
            const [d, m, y] = parts;
            if (d.length === 4) {
                 date = new Date(`${d}-${m.padStart(2, '0')}-${y.padStart(2, '0')}`);
            } else {
                 date = new Date(`${y}-${m.padStart(2, '0')}-${d.padStart(2, '0')}`);
            }
        }
    }

    return isNaN(date.getTime()) ? null : date.toISOString().split('T')[0];
};

// From components/fonts/arial.ts
// This file contains the base64 encoded data for the Arial font, used by jsPDF to support Turkish characters in PDF exports.
const arialNormal = 'AAEAAAARAQAABAAQRFNJRwAAAAAAAIIAAAAPAAAAA0RERUYAAIIkAAAAGAAAAChPUy8yAAACDAAAAGAAAABgZDJtcAAAApgAAALAAAACrGN2dCAAAAVQAAAAgAAAAIAZ2x5ZgAABlwAAFboAABW6GhlYWQAAAEsAAAANgAAADY2aGhlYQAAATgAAAAgAAAAJDZoZWEAAAFMAAAAEgAAABRobXR4AAABZAAAAFwAAABcZWtlcm4AAGkgAAAEAAAABGRsb2NhAAB+QAAARgAAAEZobWF4cAAAAVgAAAAgAAAAJG5hbWUAAZCkAAADGgAAAyZwb3N0AAGQ4AAAAegAAAI6cHJlcAAABVQAAAEaAAABGgACAAAEAAMAAAAAAAAAAQAAAAEAAAAAAQAEAAEAAAAAAAAAQAD/4AAAACAAAAAgAAMAAQAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAABAAH/4AAAAAgAAAAAAQAAAAAAAAAAAAIAAAADAAAAFAADAAEAAAAUAAQAQAAAAAYABAABAAAAgAAm/+AAIAAgACsASQBLAE4AZgBnAG4AeACAAIIAkgCfAKAAqwC3AMAA2ADgAOwA9gD/AQMBEwEcASMBKgEvATQBOwFBAUQBSAFMAVoBXAFgAWMBagFwAXUBgAGBAYIBjAGSAZgBnQGiAa4BsAG3AcgBzAHUAd4B6AHvAfQB+gIIAiACLgI8AkICSwJWAlgCXgJoAnECcQJ1AnYCewKEAo4CkAKeAqACqgK4AsAC3ALiAvIC+AMCAw4DHQMhAyIDLwM4AzoDQANEA1QDZgNsA3sDiAOOA5EDlAOeA6kDqQOzA8IDyAPOA9QD2wPiA+oD/AQEBBQEFgQcBCgEOgRIAAAAAAEAAAAAALQHI/O7Xw889QALBAAAAAAA3YJ/LgAAAADdgn8uAAD/7AIAA7cAAAAIAAIAAAAAAAAAAQAAAO7/7AABAAAAAADsAAAAAQAAAAAAAAAAAAAAAgAAAAADSXJhbmlhbiBTdG9ja3MvRm9uZXdhbGUAVgBlAHIAcwBpAG8AbgAgADEALgAwAEEAcgBpAGEAbABSAGUAZwB1agwAYQByAEEAcgBpAGEAbAAAAAACAAAAAAAA/4AAAACACgAAAAAARAAAAAEAAAAAAAAAAAAAAAAAAAABAAMAAwAAAAAAAgAAAAAACgAAAwAAAAIABAAAAAEAAgAAAAMAAAAAAAAAATEzNjQyNTMuOTM5MTQ1MS4yNzA2MzIzLjI3MDYxOTYAAgMGBwkKCwwNDg8QERITFBUWFxgZGhscHR4fICEiIyQlJicpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/wACBgYICQoKCwwODw8REhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/wACAgQFBgcICQoLDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+f4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SlpqeoqaqrrK2ur7CxsrO0tba3uLm6u7y9vr/AAMLBwsPExcYHxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/g4eLj5OXm5+jp6uvs7e7v8PHy8/T19vf4+fr7/P3+/wAgASgAIAEoAAgAIAB3AEQAFwB4AFoAIwAAACEAGABNAA4AFgB0ADwADABkAC0AJgASABsADAAZADAANAAaACMAKQArADIAQQAFAHcAVQAWACkAMwBvAFcAHAByAGgADQB0AD0ABgAvADkAaQBPAA4ADQATAAgAAQATABAAOABGAF4AZwAHAAYABQANAEcATgA1AAEABgAJAAsACAAFAAgABQAIAAAAAQACAAIAAgAAAAIAAg

// From components/Modal.tsx
const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;
    return (
        React.createElement("div", {
            className: "fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-40 p-4",
            onClick: onClose
        }, React.createElement("div", {
            className: "bg-white/80 backdrop-blur-md rounded-xl shadow-2xl w-full max-w-lg flex flex-col gap-4 border border-white/30",
            onClick: e => e.stopPropagation()
        }, React.createElement("div", {
            className: "p-5 border-b border-slate-200"
        }, React.createElement("h3", {
            className: "text-xl font-bold text-slate-700"
        }, title)), React.createElement("div", {
            className: "p-5 flex flex-col gap-4"
        }, children)))
    );
};

// From components/AutocompleteSelect.tsx
const AutocompleteSelect = ({ options, value, onChange, placeholder, className }) => {
    const [inputValue, setInputValue] = useState('');
    const [isOpen, setIsOpen] = useState(false);
    const wrapperRef = useRef(null);
    const inputRef = useRef(null);
    const inputClassName = className || "w-full p-3 border border-slate-300 rounded-lg text-slate-700 focus:outline-none focus:ring-2 focus:ring-ogm-green-500 bg-white";

    useEffect(() => {
        const selectedOption = options.find(option => option.value === value);
        setInputValue(selectedOption ? selectedOption.label : '');
    }, [value, options]);

    const handleBlur = () => {
        setTimeout(() => {
            if (inputRef.current && (document.activeElement === inputRef.current || (wrapperRef.current && wrapperRef.current.contains(document.activeElement)))) {
                return;
            }

            setIsOpen(false);
            const trimmedInput = inputValue.trim();

            if (!trimmedInput) {
                if (value) onChange('');
                setInputValue('');
                return;
            }

            const exactMatch = options.find(option =>
                option.label.toLocaleLowerCase('tr-TR') === trimmedInput.toLocaleLowerCase('tr-TR')
            );

            if (exactMatch) {
                setInputValue(exactMatch.label);
                if (exactMatch.value !== value) {
                    onChange(exactMatch.value);
                }
            } else {
                setInputValue('');
                if (value) {
                    onChange('');
                }
            }
        }, 150);
    };

    const handleInputChange = (e) => {
        const currentInput = e.target.value;
        setInputValue(currentInput);
        if (currentInput === '') {
            onChange('');
        }
        setIsOpen(true);
    };

    const handleSelectOption = (option) => {
        setInputValue(option.label);
        onChange(option.value);
        setIsOpen(false);
    };

    const filteredOptions = useMemo(() => {
        const inputWithoutSpaces = inputValue ? String(inputValue).replace(/\s/g, '').toLocaleLowerCase('tr-TR') : "";
        if (!inputWithoutSpaces) {
            return [...options].sort((a, b) => String(a.label).localeCompare(String(b.label), 'tr-TR'));
        }
        const startsWith = [];
        const includes = [];
        for (const option of options) {
            if (!option.label) continue;
            const labelWithoutSpaces = String(option.label).replace(/\s/g, '').toLocaleLowerCase('tr-TR');
            if (labelWithoutSpaces.startsWith(inputWithoutSpaces)) {
                startsWith.push(option);
            } else if (labelWithoutSpaces.includes(inputWithoutSpaces)) {
                includes.push(option);
            }
        }
        startsWith.sort((a, b) => String(a.label).localeCompare(String(b.label), 'tr-TR'));
        includes.sort((a, b) => String(a.label).localeCompare(String(b.label), 'tr-TR'));
        return [...startsWith, ...includes];
    }, [inputValue, options]);

    return (
        React.createElement("div", { className: "relative", ref: wrapperRef },
            React.createElement("input", {
                ref: inputRef,
                type: "text",
                value: inputValue,
                onChange: handleInputChange,
                onFocus: () => setIsOpen(true),
                onBlur: handleBlur,
                placeholder: placeholder,
                className: inputClassName,
                autoComplete: "off"
            }),
            isOpen && (
                React.createElement("ul", { className: "absolute z-10 w-full mt-1 bg-white border border-slate-300 rounded-lg shadow-lg max-h-60 overflow-y-auto" },
                    filteredOptions.length > 0 ? (
                        filteredOptions.map(option => (
                            React.createElement("li", {
                                key: option.value || option.label,
                                onMouseDown: (e) => { e.preventDefault(); handleSelectOption(option); },
                                className: "p-3 hover:bg-slate-100 cursor-pointer text-sm"
                            },
                                option.label
                            )
                        ))
                    ) : (
                        React.createElement("li", { className: "p-3 text-slate-500 text-sm" }, "Sonuç bulunamadı")
                    )
                )
            )
        )
    );
};

// From components/LoadingSpinner.tsx
const LoadingSpinner = ({ isVisible }) => {
    if (!isVisible) return null;
    return (
        React.createElement("div", { className: "fixed inset-0 bg-black bg-opacity-60 flex justify-center items-center z-50" },
            React.createElement("div", { className: "text-white text-lg font-semibold flex items-center gap-4 p-4 bg-black/50 rounded-lg" },
                React.createElement("svg", { className: "animate-spin h-8 w-8 text-white", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24" },
                    React.createElement("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }),
                    React.createElement("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })
                ),
                "İşlem yapılıyor..."
            )
        )
    );
};

// From components/MessageBox.tsx
const MessageBox = ({ text, type }) => {
    const baseClasses = "fixed top-8 left-1/2 -translate-x-1/2 text-white py-3 px-6 rounded-lg z-50 text-center text-lg shadow-xl transition-all duration-300";
    const typeClasses = {
        success: 'bg-green-500',
        error: 'bg-red-500',
    };
    return (
        React.createElement("div", { className: `${baseClasses} ${typeClasses[type]}` },
            text
        )
    );
};

const RedirectingOverlay = ({ isVisible, isFadingOut }) => {
    if (!isVisible) return null;
    const animationClass = isFadingOut ? 'animate-fadeOut' : 'animate-fadeIn';
    return (
        React.createElement("div", { className: `fixed inset-0 bg-white flex flex-col justify-center items-center z-50 text-center ${animationClass}` },
            React.createElement("img", {
                src: "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExb3E3cXhjcDJibHQ2YTJiOTh0dTg3azF2M210MjJsdXVrYTJpdmE0dCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/1rrxPs1nb3IjwmbiXw/giphy.gif",
                alt: "Helikopter Logo",
                className: "h-48 w-48 rounded-full object-cover mb-8"
            }),
            React.createElement("p", { className: "text-2xl text-ogm-green-800 font-bold" }, "Makbuz yükleme adımına yönlendiriliyorsunuz...")
        )
    );
};

// From components/Header.tsx
const Header = () => {
    return (
        React.createElement("header", { className: "bg-ogm-green-700/80 backdrop-blur-sm text-white py-4 px-6 text-center rounded-xl -mt-12 -mx-8 mb-6 sm:-mt-14 sm:-mx-12 sm:mb-8 flex items-center justify-between shadow-lg" },
            React.createElement("div", { className: "flex items-center space-x-1 sm:space-x-4 ml-2 sm:ml-4" },
                React.createElement("div", { className: "rounded-full embedded-shadow flex-shrink-0" },
                    React.createElement("img", {
                        src: "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExMWx6eG0zcjIxY2xqczQ3NDdzdWg1NnBuZjJsY3Z0aG53djI3bmtyciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/eRlCNIpfGdPdub57JI/giphy.gif",
                        alt: "OGM Logo",
                        className: "h-14 w-14 sm:h-28 sm:w-28 rounded-full object-cover"
                    })
                ),
                React.createElement("div", { className: "rounded-full embedded-shadow flex-shrink-0 animated-gif-left" },
                    React.createElement("img", {
                        src: "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExbmJ0N2k2anQ5dzBncWMwd2Fkemh3M2Zudm9hMXpmODNxYngwMTlwOCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Ft0CtHyxdGJusr6MWi/giphy.gif",
                        alt: "Animated Left Gif",
                        className: "h-14 w-14 sm:h-28 sm:w-28 rounded-full object-cover"
                    })
                )
            ),
            React.createElement("div", { className: "flex flex-col items-center px-4" },
                React.createElement("h1", { className: "text-base sm:text-3xl font-bold uppercase tracking-wider" }, "ORMAN GENEL MÜDÜRLÜĞÜ"),
                React.createElement("p", { className: "text-sm sm:text-2xl font-semibold uppercase" }, "HAVACILIK DAİRESİ"),
                React.createElement("p", { className: "text-xs sm:text-xl font-medium uppercase" }, "YAKIT TAKİP SİSTEMİ")
            ),
            React.createElement("div", { className: "flex items-center space-x-1 sm:space-x-4 mr-2 sm:mr-4" },
                 React.createElement("div", { className: "rounded-full embedded-shadow flex-shrink-0 animated-gif-right hidden sm:block" },
                     React.createElement("img", {
                        src: "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExcmI3ZWpuc25laHFtd3FjdnNvNHZ0cTN1NzFkZjVlbzMxN2Y1N2J3byZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/il1R6wTaTD5q5d7H6T/giphy.gif",
                        alt: "Animated Right Gif",
                        className: "h-14 w-14 sm:h-28 sm:w-28 rounded-full object-cover transform scale-x-[-1]",
                        style: { objectPosition: 'center 47.5%' }
                    })
                ),
                React.createElement("div", { className: "rounded-full embedded-shadow flex-shrink-0" },
                    React.createElement("img", {
                        src: "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExb3E3cXhjcDJibHQ2YTJiOTh0dTg3azF2M210MjJsdXVrYTJpdmE0dCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/1rrxPs1nb3IjwmbiXw/giphy.gif",
                        alt: "Helikopter Logo",
                        className: "h-14 w-14 sm:h-28 sm:w-28 rounded-full object-cover"
                    })
                )
            )
        )
    );
};

// From components/Tabs.tsx
const TabButton = ({ onClick, isActive, children }) => {
    const baseClasses = "py-3 px-4 rounded-lg font-semibold text-sm sm:text-base transition-all duration-300 flex-1 text-center relative";
    const activeClasses = "bg-ogm-green-600 text-white shadow-md";
    const inactiveClasses = "bg-white/60 text-ogm-green-900 font-semibold hover:bg-white/80";
    return (
        React.createElement("button", { onClick: onClick, className: `${baseClasses} ${isActive ? activeClasses : inactiveClasses}` },
            children
        )
    );
};

const Tabs = ({ activeView, setActiveView }) => {
    return (
        React.createElement("nav", { className: "flex justify-center w-full gap-2 sm:gap-4" },
            React.createElement(TabButton, { onClick: () => setActiveView(VIEW_FUEL_ENTRY), isActive: activeView === VIEW_FUEL_ENTRY }, "Yakıt Girişi"),
            React.createElement(TabButton, { onClick: () => setActiveView(VIEW_SEARCH_RECORDS), isActive: activeView === VIEW_SEARCH_RECORDS }, "Kayıtları Ara"),
            React.createElement(TabButton, { onClick: () => setActiveView(VIEW_ADMIN_PANEL), isActive: activeView === VIEW_ADMIN_PANEL }, "Yönetici Paneli")
        )
    );
};

// From components/FuelEntryForm.tsx
const InputField = (props) => (
    React.createElement("input", { ...props, className: "w-full p-3 border border-slate-300 rounded-lg text-slate-700 focus:outline-none focus:ring-2 focus:ring-ogm-green-500" })
);
const SelectField = (props) => (
    React.createElement("select", { ...props, className: "w-full p-3 border border-slate-300 rounded-lg text-slate-700 focus:outline-none focus:ring-2 focus:ring-ogm-green-500 bg-white" })
);

const FuelEntryForm = ({ personnelList, aircraftData, tankerData, airportList, onAddRecord, onAddPersonnelRequest, showMessage }) => {
    const [entryType, setEntryType] = useState('personnel');

    const defaultFormData = {
        date: new Date().toISOString().split('T')[0],
        receiptNumber: '',
        fuelAmount: '',
        kayitNumarasi: '',
        personnelId: '',
        personnelName: '',
        jobTitle: '',
        locationType: '',
        location: '',
        tailNumber: '',
        cardNumber: '',
        tankerPlate: '',
        airport: '',
        receivingTankerPlate: '',
        fillingTankerPlate: '',
    };

    const [isManualPersonnelEntry, setIsManualPersonnelEntry] = useState(false);
    const [manualPersonnel, setManualPersonnel] = useState({ name: '', job: '' });
    const [currentStep, setCurrentStep] = useState(1);
    const [formData, setFormData] = useState(defaultFormData);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isRedirecting, setIsRedirecting] = useState(false);
    const [isFadingOut, setIsFadingOut] = useState(false);


    useEffect(() => {
        setCurrentStep(1);
        setFormData(defaultFormData);
        setIsManualPersonnelEntry(false);
        setManualPersonnel({ name: '', job: '' });
    }, [entryType]);

    useEffect(() => {
        if (entryType === 'tankerTransfer') {
            if (formData.receivingTankerPlate && formData.fillingTankerPlate === formData.receivingTankerPlate) {
                setFormData(prev => ({ ...prev, fillingTankerPlate: '' }));
            }
        }
    }, [formData.receivingTankerPlate, entryType]);

    const selectedAirport = useMemo(() => {
        if (entryType === 'personnel' && formData.locationType === 'Hava Limanı/Alanı' && formData.location) {
            return airportList.find(a => a.name === formData.location);
        }
        return null;
    }, [formData.location, formData.locationType, airportList, entryType]);

    const isMilitaryLocation = selectedAirport?.type === 'Askeri';

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleManualPersonnelChange = (e) => {
        const { name, value } = e.target;
        setManualPersonnel(prev => ({ ...prev, [name]: value }));
    }

    const handleGenericSelect = (name, value) => {
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handlePersonnelChange = (selectedValue) => {
        const selectedPersonnel = personnelList.find(p => p.id === selectedValue);
        if (selectedPersonnel) {
            setFormData(prev => ({
                ...prev,
                personnelId: selectedPersonnel.id,
                personnelName: selectedPersonnel.name,
                jobTitle: selectedPersonnel.job
            }));
        } else {
            setFormData(prev => ({ ...prev, personnelId: '', personnelName: '', jobTitle: '' }));
        }
    };

    const isStepValid = (step) => {
        switch (entryType) {
            case 'personnel':
                switch (step) {
                    case 1:
                        if (isManualPersonnelEntry) {
                            return formData.date && manualPersonnel.name && manualPersonnel.job;
                        }
                        return formData.date && formData.personnelId;
                    case 2: return formData.locationType && formData.location;
                    case 3: return isMilitaryLocation ? formData.cardNumber : true;
                    case 4: return !!(formData.receiptNumber && (!isManualPersonnelEntry && formData.jobTitle !== 'Pilot' || isManualPersonnelEntry && manualPersonnel.job !== 'Pilot' || formData.tailNumber));
                    case 5: return parseFloat(formData.fuelAmount) > 0;
                    default: return true;
                }
            case 'tankerDolum':
                switch (step) {
                    case 1: return formData.date && formData.tankerPlate;
                    case 2: return !!formData.airport;
                    case 3: return !!formData.receiptNumber;
                    case 4: return parseFloat(formData.fuelAmount) > 0;
                    default: return true;
                }
            case 'tankerTransfer':
                switch (step) {
                    case 1: return formData.date && formData.receivingTankerPlate;
                    case 2: return !!formData.fillingTankerPlate;
                    case 3: return !!formData.receiptNumber;
                    case 4: return parseFloat(formData.fuelAmount) > 0;
                    default: return true;
                }
            default: return false;
        }
    };

    const nextStep = () => {
        if (isStepValid(currentStep)) {
            let next = currentStep + 1;
            if (entryType === 'personnel' && currentStep === 2 && !isMilitaryLocation) {
                next++;
            }
            setCurrentStep(next);
        }
    };

    const prevStep = () => {
        let prev = currentStep - 1;
        if (entryType === 'personnel' && currentStep === 4 && !isMilitaryLocation) {
            prev--;
        }
        setCurrentStep(prev);
    };

    const handleSubmit = async () => {
        const maxSteps = entryType === 'personnel' ? 5 : 4;
        if (!isStepValid(maxSteps)) return;
        setIsSubmitting(true);

        let recordToSave = {};
        let redirectUrl = '';
        const kayitNumarasi = generateRecordNumber();

        const ogmUrl = "https://bulut.ogm.gov.tr/app/tr-TR/Form/Paylas/OGMDrive/75ea6f49-f522-41f7-90a5-73d41bc8bdea";
        const rentalAircraftUrl = "https://bulut.ogm.gov.tr/app/tr-TR/Form/Paylas/OGMDrive/a241325f-9a09-47a2-aed3-1e298f69e324";
        const rentalTankerUrl = "https://bulut.ogm.gov.tr/app/tr-TR/Form/Paylas/OGMDrive/c9d7fd7b-8e6e-4daa-a486-6b01c8a89004";

        if (entryType === 'personnel') {
            let formattedReceiptNumber = formData.receiptNumber;
            const finalJobTitle = isManualPersonnelEntry ? manualPersonnel.job : formData.jobTitle;

            if (finalJobTitle === 'Şoför') {
                formattedReceiptNumber = `ATIK / ${formData.receiptNumber}`;
            } else {
                if (formData.locationType === 'Tanker') {
                    const tanker = tankerData.find(t => t.plate === formData.location);
                    if (tanker) {
                        formattedReceiptNumber = `${tanker.company} / ${formData.receiptNumber}`;
                    }
                } else if (selectedAirport) {
                    if (selectedAirport.name.includes('Selçuk-Efes')) {
                        formattedReceiptNumber = `THK / ${formData.receiptNumber}`;
                    } else if (selectedAirport.name.includes('Zonguldak')) {
                         formattedReceiptNumber = `ZON-AIR / ${formData.receiptNumber}`;
                    } else if (selectedAirport.type === 'Askeri') {
                        formattedReceiptNumber = `2025 / ${formData.receiptNumber}`;
                    } else {
                        formattedReceiptNumber = `AN / ${formData.receiptNumber}`;
                    }
                }
            }

            const selectedAircraft = aircraftData.find(a => a.tailNumber === formData.tailNumber);
            const companyName = selectedAircraft?.company?.toLowerCase().trim() || '';
            const ogmCompanies = ['ogm', 'orman'];

            if (ogmCompanies.some(ogmComp => companyName.includes(ogmComp))) {
                redirectUrl = ogmUrl;
            } else {
                redirectUrl = rentalAircraftUrl;
            }

            let finalPersonnelData = {
                personnelName: formData.personnelName,
                jobTitle: formData.jobTitle
            };

            if(isManualPersonnelEntry) {
                finalPersonnelData = {
                    personnelName: manualPersonnel.name,
                    jobTitle: manualPersonnel.job
                };
                await onAddPersonnelRequest({
                    name: manualPersonnel.name,
                    job: manualPersonnel.job,
                });
            }

            recordToSave = {
                ...formData,
                ...finalPersonnelData,
                fuelAmount: parseFloat(formData.fuelAmount) || 0,
                kayitNumarasi,
                receiptNumber: formattedReceiptNumber,
                recordType: 'personnel',
            };
            if (!isMilitaryLocation) delete recordToSave.cardNumber;

        } else if (entryType === 'tankerDolum' || entryType === 'tankerTransfer') {
             const tankerPlateToCheck = entryType === 'tankerDolum' ? formData.tankerPlate : formData.fillingTankerPlate;
             const tanker = tankerData.find(t => t.plate === tankerPlateToCheck);
             const companyName = tanker?.company?.toLowerCase().trim() || '';
             
             if (companyName.includes('ogm')) {
                 redirectUrl = ogmUrl;
             } else {
                 redirectUrl = rentalTankerUrl;
             }

             if (entryType === 'tankerDolum') {
                recordToSave = {
                    date: formData.date,
                    receiptNumber: formData.receiptNumber,
                    fuelAmount: parseFloat(formData.fuelAmount) || 0,
                    tankerPlate: formData.tankerPlate,
                    location: formData.airport,
                    locationType: "Tanker Dolum",
                    personnelName: 'Tanker Dolum',
                    recordType: 'tankerDolum',
                    kayitNumarasi,
                };
             } else { // tankerTransfer
                recordToSave = {
                    date: formData.date,
                    receiptNumber: formData.receiptNumber,
                    fuelAmount: parseFloat(formData.fuelAmount) || 0,
                    receivingTankerPlate: formData.receivingTankerPlate,
                    fillingTankerPlate: formData.fillingTankerPlate,
                    location: `${formData.fillingTankerPlate} -> ${formData.receivingTankerPlate}`,
                    locationType: "Tanker Transfer",
                    personnelName: 'Tanker Transfer',
                    recordType: 'tankerTransfer',
                    kayitNumarasi,
                };
             }
        }

        try {
            await onAddRecord(recordToSave);
            setIsRedirecting(true);

            setTimeout(() => {
                setIsFadingOut(true);
                window.location.href = redirectUrl;
            }, 2000);
        } catch (error) {
            console.error("Failed to submit record:", error);
            showMessage('Kayıt gönderilemedi. Lütfen tekrar deneyin.', 'error');
            setIsSubmitting(false);
        }
    };

    useEffect(() => {
        if(entryType === 'personnel'){
            setFormData(prev => ({ ...prev, location: '' }));
        }
    }, [formData.locationType, entryType]);

    const renderPersonnelSteps = () => {
        switch (currentStep) {
            case 1:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Tarih:"),
                        React.createElement(InputField, { type: "date", name: "date", value: formData.date, onChange: handleChange, required: true })
                    ),
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Adı Soyadı:"),
                        !isManualPersonnelEntry ?
                            React.createElement(AutocompleteSelect, {
                                options: personnelList.map(p => ({ value: p.id, label: p.name })),
                                value: formData.personnelId,
                                onChange: handlePersonnelChange,
                                placeholder: "Personel Seçiniz veya Arayınız"
                            }) :
                            React.createElement("div", { className: "space-y-2" },
                                React.createElement(InputField, {
                                    type: "text",
                                    name: "name",
                                    value: manualPersonnel.name,
                                    onChange: handleManualPersonnelChange,
                                    placeholder: "Ad Soyad Giriniz (BÜYÜK HARFLERLE)",
                                    pattern: "[A-ZÇĞİÖŞÜ ]*",
                                    title: "Lütfen sadece büyük harf kullanın.",
                                    className: "w-full p-3 border border-slate-300 rounded-lg text-slate-700 focus:outline-none focus:ring-2 focus:ring-ogm-green-500 uppercase"
                                }),
                                React.createElement(SelectField, { name: "job", value: manualPersonnel.job, onChange: handleManualPersonnelChange },
                                    React.createElement("option", { value: "", disabled: true }, "Meslek Seçiniz"),
                                    React.createElement("option", { value: "Pilot" }, "Pilot"),
                                    React.createElement("option", { value: "Uçuş Teknisyeni" }, "Uçuş Teknisyeni"),
                                    React.createElement("option", { value: "Şoför" }, "Şoför")
                                )
                            )
                    ),
                     React.createElement("div", { className: "flex items-center gap-2 mt-2" },
                        React.createElement("input", { type: "checkbox", id: "manual-entry", checked: isManualPersonnelEntry, onChange: (e) => setIsManualPersonnelEntry(e.target.checked) }),
                        React.createElement("label", { htmlFor: "manual-entry", className: "text-sm text-slate-600 cursor-pointer" }, "Listede adım yok")
                    ),
                    formData.jobTitle && !isManualPersonnelEntry && React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Mesleği:"),
                        React.createElement(InputField, { type: "text", name: "jobTitle", value: formData.jobTitle, readOnly: true, className: "w-full p-3 border border-slate-300 rounded-lg text-slate-700 bg-slate-100" })
                    ));
            case 2:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "İkmal Tipi:"),
                         React.createElement(SelectField, { name: "locationType", value: formData.locationType, onChange: handleChange, required: true },
                            React.createElement("option", { value: "", disabled: true }, "İkmal Tipi Seçiniz"),
                            React.createElement("option", { value: "Tanker" }, "Tanker"),
                            React.createElement("option", { value: "Hava Limanı/Alanı" }, "Hava Limanı/Alanı")
                        )
                    ),
                    formData.locationType === 'Tanker' && React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Konum (Tanker Plakası):"),
                        React.createElement(AutocompleteSelect, {
                            options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                            value: formData.location,
                            onChange: (value) => handleGenericSelect('location', value),
                            placeholder: "Tanker Plakası Seçiniz veya Arayınız"
                        })
                    ),
                    formData.locationType === 'Hava Limanı/Alanı' && React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Konum (Hava Limanı/Alanı):"),
                        React.createElement(AutocompleteSelect, {
                            options: airportList.map(airport => ({ value: airport.name, label: airport.name })),
                            value: formData.location,
                            onChange: (value) => handleGenericSelect('location', value),
                            placeholder: "Havalimanı Seçiniz veya Arayınız"
                        })
                    ));
            case 3:
                if (!isMilitaryLocation) return null;
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Kart Numarası:"),
                        React.createElement(InputField, { type: "text", name: "cardNumber", value: formData.cardNumber, onChange: handleChange, placeholder: "Kart Numarası Giriniz", required: true })
                    )
                );
            case 4:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Makbuz Numarası:"),
                        React.createElement(InputField, { type: "text", name: "receiptNumber", value: formData.receiptNumber, onChange: handleChange, placeholder: "Örn: 123456789", required: true })
                    ),
                    ((!isManualPersonnelEntry && formData.jobTitle === 'Pilot') || (isManualPersonnelEntry && manualPersonnel.job === 'Pilot')) && React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Hava Aracı Kuyruk Numarası:"),
                        React.createElement(AutocompleteSelect, {
                            options: aircraftData.map(a => ({ value: a.tailNumber, label: a.tailNumber })),
                            value: formData.tailNumber,
                            onChange: (value) => handleGenericSelect('tailNumber', value),
                            placeholder: "Kuyruk No Seçiniz veya Arayınız"
                        })
                    ));
            case 5:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Alınan Yakıt Miktarı (lt):"),
                        React.createElement(InputField, { type: "number", name: "fuelAmount", value: formData.fuelAmount, onChange: e => setFormData(prev => ({ ...prev, fuelAmount: e.target.value })), step: "0.01", min: "0", placeholder: "Örn: 500.75", required: true })
                    )
                );
            default: return null;
        }
    };

    const renderTankerDolumSteps = () => {
        switch (currentStep) {
            case 1:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Tarih:"),
                        React.createElement(InputField, { type: "date", name: "date", value: formData.date, onChange: handleChange, required: true })
                    ),
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Tanker Plakası:"),
                        React.createElement(AutocompleteSelect, {
                            options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                            value: formData.tankerPlate,
                            onChange: (value) => handleGenericSelect('tankerPlate', value),
                            placeholder: "Tanker Plakası Seçiniz veya Arayınız"
                        })
                    )
                );
            case 2:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Hava Limanı:"),
                        React.createElement(AutocompleteSelect, {
                            options: airportList.map(a => ({ value: a.name, label: a.name })),
                            value: formData.airport,
                            onChange: (value) => handleGenericSelect('airport', value),
                            placeholder: "Havalimanı Seçiniz veya Arayınız"
                        })
                    )
                );
            case 3:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Makbuz Numarası:"),
                        React.createElement(InputField, { type: "text", name: "receiptNumber", value: formData.receiptNumber, onChange: handleChange, placeholder: "Örn: 123456789", required: true })
                    )
                );
            case 4:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Alınan Yakıt Miktarı (lt):"),
                        React.createElement(InputField, { type: "number", name: "fuelAmount", value: formData.fuelAmount, onChange: e => setFormData(prev => ({ ...prev, fuelAmount: e.target.value })), step: "0.01", min: "0", placeholder: "Örn: 500.75", required: true })
                    )
                );
            default: return null;
        }
    };

    const renderTankerTransferSteps = () => {
        switch (currentStep) {
            case 1:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Tarih:"),
                        React.createElement(InputField, { type: "date", name: "date", value: formData.date, onChange: handleChange, required: true })
                    ),
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Alan Tanker Plakası:"),
                        React.createElement(AutocompleteSelect, {
                            options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                            value: formData.receivingTankerPlate,
                            onChange: (value) => handleGenericSelect('receivingTankerPlate', value),
                            placeholder: "Alan Tanker Plakasını Seçiniz"
                        })
                    )
                );
            case 2:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Dolum Yapan Tanker Plakası:"),
                        React.createElement(AutocompleteSelect, {
                            options: tankerData
                                .filter(t => t.plate !== formData.receivingTankerPlate)
                                .map(t => ({ value: t.plate, label: t.plate })),
                            value: formData.fillingTankerPlate,
                            onChange: (value) => handleGenericSelect('fillingTankerPlate', value),
                            placeholder: "Dolum Yapan Tanker Plakasını Seçiniz"
                        })
                    )
                );
            case 3:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Makbuz Numarası:"),
                        React.createElement(InputField, { type: "text", name: "receiptNumber", value: formData.receiptNumber, onChange: handleChange, placeholder: "Örn: 123456789", required: true })
                    )
                );
            case 4:
                return React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "form-group" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Transfer Edilen Yakıt Miktarı (lt):"),
                        React.createElement(InputField, { type: "number", name: "fuelAmount", value: formData.fuelAmount, onChange: e => setFormData(prev => ({ ...prev, fuelAmount: e.target.value })), step: "0.01", min: "0", placeholder: "Örn: 500.75", required: true })
                    )
                );
            default: return null;
        }
    };

    const renderStep = () => {
        switch (entryType) {
            case 'personnel': return renderPersonnelSteps();
            case 'tankerDolum': return renderTankerDolumSteps();
            case 'tankerTransfer': return renderTankerTransferSteps();
            default: return null;
        }
    };

    const maxSteps = entryType === 'personnel' ? 5 : 4;

    return (
        React.createElement(React.Fragment, null,
            React.createElement(RedirectingOverlay, { isVisible: isRedirecting, isFadingOut: isFadingOut }),
            React.createElement("div", { className: "space-y-6" },
                React.createElement("h2", { className: "text-2xl font-bold text-slate-700" }, "Yakıt Girişi"),
                React.createElement("div", { className: "flex justify-center gap-2 sm:gap-4 p-2 bg-black/10 rounded-lg" },
                    [
                        { id: 'personnel', label: 'Hava Aracı İkmal' },
                        { id: 'tankerDolum', label: 'Tanker Dolum' },
                        { id: 'tankerTransfer', label: 'Tanker Transfer' }
                    ].map(type =>
                        React.createElement("button", {
                            key: type.id,
                            onClick: () => setEntryType(type.id),
                            className: `flex-1 py-2 px-3 rounded-md text-sm font-semibold transition-all ${entryType === type.id ? 'bg-ogm-green-600 text-white shadow' : 'bg-white/60 text-ogm-green-900 hover:bg-white/80'}`
                        },
                            type.label
                        )
                    )
                ),
                React.createElement("form", { onSubmit: e => e.preventDefault() },
                    renderStep(),
                    React.createElement("div", { className: "flex justify-between gap-4 mt-6" },
                        currentStep > 1 && (
                            React.createElement("button", { type: "button", onClick: prevStep, className: "flex-1 py-3 px-6 bg-slate-500 text-white rounded-lg font-semibold hover:bg-slate-600 transition-colors" }, "Geri")
                        ),
                        currentStep < maxSteps ? (
                            React.createElement("button", { type: "button", onClick: nextStep, disabled: !isStepValid(currentStep), className: "flex-1 py-3 px-6 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 transition-colors disabled:bg-slate-300 disabled:cursor-not-allowed" }, "İleri")
                        ) : (
                            React.createElement("button", { type: "button", onClick: handleSubmit, disabled: isSubmitting || !isStepValid(currentStep), className: "flex-1 py-3 px-6 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 transition-colors disabled:bg-slate-300" },
                                isSubmitting ? 'Yönlendiriliyor...' : 'Kaydet ve Yönlendir'
                            )
                        )
                    )
                )
            )
        )
    );
};

// From components/SearchRecords.tsx
const SearchRecords = ({ fuelRecords, personnelList, aircraftData, tankerData, airportList, onAddApprovalRequest, showMessage }) => {
    const [filters, setFilters] = useState({ startDate: '', endDate: '', personnelId: '', tailNumber: '', tankerPlate: '', kayitNumarasi: '' });
    const [displayedRecords, setDisplayedRecords] = useState([]);
    const [hasSearched, setHasSearched] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [editingRecord, setEditingRecord] = useState(null);
    const [editedFields, setEditedFields] = useState({});

    const uniqueTailNumbers = useMemo(() => {
        if (!aircraftData) return [];
        return [...new Set(aircraftData.map(a => a.tailNumber))].sort();
    }, [aircraftData]);

    const uniqueTankerPlates = useMemo(() => {
        if (!tankerData) return [];
        return [...new Set(tankerData.map(t => t.plate))].sort();
    }, [tankerData]);

    const allLocations = useMemo(() => {
        if (!tankerData || !airportList) return [];
        const tankerPlates = tankerData.map(t => t.plate);
        const airportNames = airportList.map(a => a.name);
        return [...new Set([...airportNames, ...tankerPlates])].sort();
    }, [tankerData, airportList]);

    const handleSearch = () => {
        const results = fuelRecords.filter(record => {
            const matchesDate = (!filters.startDate || record.date >= filters.startDate) &&
                                (!filters.endDate || record.date <= filters.endDate);
            const matchesPersonnel = !filters.personnelId || record.personnelId === filters.personnelId;
            const matchesTailNumber = !filters.tailNumber || record.tailNumber === filters.tailNumber;
            const matchesTankerPlate = !filters.tankerPlate || (record.locationType === 'Tanker' && record.location === filters.tankerPlate) || (record.tankerPlate === filters.tankerPlate) || (record.receivingTankerPlate === filters.tankerPlate) || (record.fillingTankerPlate === filters.tankerPlate);
            const matchesKayitNumarasi = !filters.kayitNumarasi || (record.kayitNumarasi && String(record.kayitNumarasi).includes(filters.kayitNumarasi));
            return matchesDate && matchesPersonnel && matchesTailNumber && matchesTankerPlate && matchesKayitNumarasi;
        });
        setDisplayedRecords(results);
        setHasSearched(true);
    };

    const handleFilterChange = (e) => {
        setFilters(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleRowDoubleClick = (record) => {
        setEditingRecord(record);
        setEditedFields(record);
        setIsEditModalOpen(true);
    };

    const handleEditChange = (e) => {
        const { name, value } = e.target;
        setEditedFields(prev => ({ ...prev, [name]: name === 'fuelAmount' ? parseFloat(value) || 0 : value }));
    };

    const handleEditRequestSubmit = () => {
        if (!editingRecord) return;
        const changes = Object.keys(editedFields).reduce((acc, key) => {
            if (String(editedFields[key] ?? '') !== String(editingRecord[key] ?? '')) {
                acc[key] = editedFields[key];
            }
            return acc;
        }, {});

        if (Object.keys(changes).length === 0) {
            showMessage('Değişiklik yapılmadı.', 'error');
            return;
        }
        const newRequest = {
            id: `edit-req-${Date.now()}`,
            originalRecord: editingRecord,
            requestedChanges: changes,
            requesterName: editingRecord.personnelName,
            timestamp: new Date().toISOString()
        };
        onAddApprovalRequest(newRequest);
        showMessage('Düzenleme talebiniz yönetici onayına gönderildi.', 'success');
        setIsEditModalOpen(false);
        setEditingRecord(null);
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("h2", { className: "text-2xl font-bold text-slate-700" }, "Kayıtları Ara"),
            React.createElement("div", { className: "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 p-4 border rounded-lg bg-black/5" },
                React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Başlangıç Tarihi:"),
                    React.createElement("input", { type: "date", name: "startDate", value: filters.startDate, onChange: handleFilterChange, className: "w-full p-2 border border-slate-300 rounded-md" })
                ),
                 React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Bitiş Tarihi:"),
                    React.createElement("input", { type: "date", name: "endDate", value: filters.endDate, onChange: handleFilterChange, className: "w-full p-2 border border-slate-300 rounded-md" })
                ),
                React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Personel:"),
                    React.createElement(AutocompleteSelect, {
                        options: personnelList.map(p => ({ value: p.id, label: p.name })),
                        value: filters.personnelId,
                        onChange: (value) => setFilters(prev => ({ ...prev, personnelId: value })),
                        placeholder: "Personel Ara...",
                        className: "w-full p-2 border border-slate-300 rounded-md text-base"
                    })
                ),
                React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Kuyruk Numarası:"),
                    React.createElement(AutocompleteSelect, {
                        options: uniqueTailNumbers.map(tn => ({ value: tn, label: tn })),
                        value: filters.tailNumber,
                        onChange: (value) => setFilters(prev => ({ ...prev, tailNumber: value })),
                        placeholder: "Kuyruk No Ara...",
                        className: "w-full p-2 border border-slate-300 rounded-md text-base"
                    })
                ),
                React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Tanker Plakası:"),
                    React.createElement(AutocompleteSelect, {
                        options: uniqueTankerPlates.map(plate => ({ value: plate, label: plate })),
                        value: filters.tankerPlate,
                        onChange: (value) => setFilters(prev => ({ ...prev, tankerPlate: value })),
                        placeholder: "Plaka Ara...",
                        className: "w-full p-2 border border-slate-300 rounded-md text-base"
                    })
                ),
                 React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Kayıt No:"),
                    React.createElement("input", { type: "text", name: "kayitNumarasi", value: filters.kayitNumarasi, onChange: handleFilterChange, className: "w-full p-2 border border-slate-300 rounded-md", placeholder: "Kayıt No Ara..." })
                )
            ),
            React.createElement("button", { onClick: handleSearch, className: "w-full py-3 px-6 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 transition-colors" }, "Ara"),
            React.createElement("div", { className: "search-results" },
                React.createElement("h3", { className: "text-xl font-semibold mb-2 text-slate-700" }, "Sonuçlar"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                ['Kayıt No', 'Tarih', 'Personel', 'Meslek', 'Konum', 'Makbuz Numarası', 'Kuyruk No', 'Kart No', 'Yakıt (lt)'].map(header => (
                                    React.createElement("th", { key: header, className: "p-3 text-left font-semibold text-slate-600" }, header)
                                ))
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            displayedRecords.length > 0 ? (
                                displayedRecords.map(record => (
                                    React.createElement("tr", { key: record.id, onDoubleClick: () => handleRowDoubleClick(record), className: "hover:bg-slate-50 cursor-pointer" },
                                        React.createElement("td", { className: "p-3" }, formatDisplayDate(record.kayitNumarasi)),
                                        React.createElement("td", { className: "p-3" }, formatDisplayDateOnly(record.date)),
                                        React.createElement("td", { className: "p-3" }, record.personnelName || '--'),
                                        React.createElement("td", { className: "p-3" }, record.jobTitle || '-'),
                                        React.createElement("td", { className: "p-3" }, record.location || '--'),
                                        React.createElement("td", { className: "p-3" }, record.receiptNumber || '--'),
                                        React.createElement("td", { className: "p-3" }, record.tailNumber || '-'),
                                        React.createElement("td", { className: "p-3" }, record.cardNumber || '-'),
                                        React.createElement("td", { className: "p-3" }, record.fuelAmount ? record.fuelAmount.toFixed(2) : '0.00')
                                    )
                                ))
                            ) : (
                                React.createElement("tr", null,
                                    React.createElement("td", { colSpan: 9, className: "text-center p-6 text-slate-500" },
                                        hasSearched ? "Kayıt bulunamadı." : "Arama yapmak için yukarıdaki filtreleri kullanın."
                                    )
                                )
                            )
                        )
                    )
                )
            ),
            React.createElement(Modal, { isOpen: isEditModalOpen, onClose: () => setIsEditModalOpen(false), title: "Kayıt Düzenleme Talebi Oluştur" },
                editingRecord && React.createElement("div", { className: "space-y-4" },
                    React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4" },
                        React.createElement("div", null,
                            React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Kayıt No:"),
                            React.createElement("input", { type: "text", value: editedFields.kayitNumarasi || '', readOnly: true, className: "w-full p-2 border border-slate-300 rounded-md bg-slate-100" })
                        ),
                        React.createElement("div", null,
                            React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Tarih:"),
                            React.createElement("input", { type: "date", name: "date", value: editedFields.date ? new Date(editedFields.date).toISOString().split('T')[0] : '', onChange: handleEditChange, className: "w-full p-2 border border-slate-300 rounded-md" })
                        ),
                        React.createElement("div", null,
                            React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Yakıt Miktarı (lt):"),
                            React.createElement("input", { type: "number", name: "fuelAmount", value: editedFields.fuelAmount || '', onChange: handleEditChange, className: "w-full p-2 border border-slate-300 rounded-md" })
                        ),
                        React.createElement("div", null,
                            React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Makbuz Numarası:"),
                            React.createElement("input", { type: "text", name: "receiptNumber", value: editedFields.receiptNumber || '', onChange: handleEditChange, className: "w-full p-2 border border-slate-300 rounded-md" })
                        ),
                        editingRecord.recordType === 'personnel' && React.createElement(React.Fragment, null,
                            React.createElement("div", null,
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Konum:"),
                                React.createElement(AutocompleteSelect, {
                                    options: allLocations.map(loc => ({ value: loc, label: loc })),
                                    value: editedFields.location || '',
                                    onChange: (value) => handleEditChange({ target: { name: 'location', value } }),
                                    placeholder: "Konum Seçiniz veya Arayınız",
                                    className: "w-full p-2 border border-slate-300 rounded-md"
                                })
                            ),
                            editingRecord.cardNumber && React.createElement("div", null,
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Kart Numarası:"),
                                React.createElement("input", { type: "text", name: "cardNumber", value: editedFields.cardNumber || '', onChange: handleEditChange, className: "w-full p-2 border border-slate-300 rounded-md" })
                            ),
                            editingRecord.jobTitle === 'Pilot' && React.createElement("div", { className: "md:col-span-2" },
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Kuyruk Numarası:"),
                                React.createElement(AutocompleteSelect, {
                                    options: aircraftData.map(a => ({ value: a.tailNumber, label: a.tailNumber })),
                                    value: editedFields.tailNumber || '',
                                    onChange: (value) => handleEditChange({ target: { name: 'tailNumber', value } }),
                                    placeholder: "Kuyruk No Seçiniz veya Arayınız",
                                    className: "w-full p-2 border border-slate-300 rounded-md"
                                })
                            )
                        ),
                        editingRecord.recordType === 'tankerDolum' && React.createElement(React.Fragment, null,
                            React.createElement("div", null,
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Hava Limanı:"),
                                React.createElement(AutocompleteSelect, {
                                    options: airportList.map(a => ({ value: a.name, label: a.name })),
                                    value: editedFields.location || '',
                                    onChange: (value) => handleEditChange({ target: { name: 'location', value } }),
                                    placeholder: "Hava Limanı Seçiniz",
                                    className: "w-full p-2 border border-slate-300 rounded-md"
                                })
                            ),
                            React.createElement("div", null,
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Tanker Plakası:"),
                                React.createElement(AutocompleteSelect, {
                                    options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                                    value: editedFields.tankerPlate || '',
                                    onChange: (value) => handleEditChange({ target: { name: 'tankerPlate', value } }),
                                    placeholder: "Tanker Plakası Seçiniz",
                                    className: "w-full p-2 border border-slate-300 rounded-md"
                                })
                            )
                        ),
                        editingRecord.recordType === 'tankerTransfer' && React.createElement(React.Fragment, null,
                            React.createElement("div", null,
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Veren Tanker Plakası:"),
                                React.createElement(AutocompleteSelect, {
                                    options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                                    value: editedFields.fillingTankerPlate || '',
                                    onChange: (value) => handleEditChange({ target: { name: 'fillingTankerPlate', value } }),
                                    placeholder: "Veren Tankeri Seçiniz",
                                    className: "w-full p-2 border border-slate-300 rounded-md"
                                })
                            ),
                            React.createElement("div", null,
                                React.createElement("label", { className: "font-semibold text-slate-600 mb-1 block" }, "Alan Tanker Plakası:"),
                                React.createElement(AutocompleteSelect, {
                                    options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                                    value: editedFields.receivingTankerPlate || '',
                                    onChange: (value) => handleEditChange({ target: { name: 'receivingTankerPlate', value } }),
                                    placeholder: "Alan Tankeri Seçiniz",
                                    className: "w-full p-2 border border-slate-300 rounded-md"
                                })
                            )
                        )
                    ),
                    React.createElement("div", { className: "flex justify-end gap-3 pt-4" },
                        React.createElement("button", { onClick: () => setIsEditModalOpen(false), className: "py-2 px-5 bg-slate-200 text-slate-700 rounded-lg font-semibold hover:bg-slate-300" }, "İptal"),
                        React.createElement("button", { onClick: handleEditRequestSubmit, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Talep Oluştur")
                    )
                )
            )
        )
    );
};

// From components/AdminLogin.tsx
const AdminLogin = ({ onLoginSuccess, showMessage, adminCredentials }) => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    const handleLogin = () => {
        const user = adminCredentials.find(u => u.username === username && String(u.password) === password);
        if (user) {
            showMessage('Giriş başarılı!', 'success');
            const userWithLoginTime = { ...user, loginTime: new Date() };
            onLoginSuccess(userWithLoginTime);
        } else {
            showMessage('Kullanıcı adı veya parola yanlış.', 'error');
        }
    };

    return (
        React.createElement("div", { className: "flex flex-col items-center w-full max-w-sm mx-auto p-6 bg-slate-50 rounded-xl border border-slate-200" },
            React.createElement("h3", { className: "text-2xl font-semibold text-slate-700 mb-6" }, "Yönetici Girişi"),
            React.createElement("div", { className: "w-full space-y-4" },
                React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Kullanıcı Adı:"),
                    React.createElement("input", {
                        type: "text",
                        value: username,
                        onChange: e => setUsername(e.target.value),
                        className: "w-full p-3 border border-slate-300 rounded-lg text-slate-700 focus:outline-none focus:ring-2 focus:ring-ogm-green-500",
                        placeholder: "Kullanıcı Adı"
                    })
                ),
                React.createElement("div", null,
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block" }, "Parola:"),
                    React.createElement("input", {
                        type: "password",
                        value: password,
                        onChange: e => setPassword(e.target.value),
                        onKeyDown: e => e.key === 'Enter' && handleLogin(),
                        className: "w-full p-3 border border-slate-300 rounded-lg text-slate-700 focus:outline-none focus:ring-2 focus:ring-ogm-green-500",
                        placeholder: "Parola"
                    })
                ),
                React.createElement("button", {
                    onClick: handleLogin,
                    className: "w-full py-3 px-6 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 transition-colors"
                },
                    "Giriş"
                )
            )
        )
    );
};

// From components/AircraftDataManagement.tsx
const AircraftDataManagement = ({ aircraftData, onUpdate, showMessage }) => {
    const [newAircraft, setNewAircraft] = useState({ aircraftType: '', tailNumber: '', company: '', callSign: '' });
    const [editingAircraft, setEditingAircraft] = useState(null);
    const [selectedIds, setSelectedIds] = useState(new Set());
    
    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewAircraft(prev => ({ ...prev, [name]: value }));
    };

    const handleAddAircraft = () => {
        if (!newAircraft.aircraftType || !newAircraft.tailNumber || !newAircraft.company || !newAircraft.callSign) {
            showMessage('Lütfen tüm alanları doldurun.', 'error');
            return;
        }
        const updatedList = [...aircraftData, { ...newAircraft, id: `ac-${Date.now()}`, tailNumber: newAircraft.tailNumber.toUpperCase() }];
        onUpdate(updatedList);
        showMessage('Hava aracı başarıyla eklendi.', 'success');
        setNewAircraft({ aircraftType: '', tailNumber: '', company: '', callSign: '' });
    };

    const handleUpdateAircraft = () => {
        if (!editingAircraft) return;
        const updatedList = aircraftData.map(a => (a.id === editingAircraft.id ? editingAircraft : a));
        onUpdate(updatedList);
        showMessage('Hava aracı güncellendi.', 'success');
        setEditingAircraft(null);
    };

    const handleDeleteSelected = () => {
        if (selectedIds.size === 0) {
            showMessage('Lütfen silmek için en az bir kayıt seçin.', 'error');
            return;
        }
        const updatedList = aircraftData.filter(a => !selectedIds.has(a.id));
        onUpdate(updatedList);
        showMessage(`${selectedIds.size} kayıt silindi.`, 'success');
        setSelectedIds(new Set());
    };

    const handleSelect = (id) => {
        setSelectedIds(prev => {
            const newSet = new Set(prev);
            if (newSet.has(id)) newSet.delete(id);
            else newSet.add(id);
            return newSet;
        });
    };

    const handleSelectAll = (e) => {
        if (e.target.checked) {
            setSelectedIds(new Set(aircraftData.map(a => a.id)));
        } else {
            setSelectedIds(new Set());
        }
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("div", { className: "p-4 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Manuel Hava Aracı Ekle"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 items-end" },
                    React.createElement("div", { className: "lg:col-span-1" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Hava Aracı Tipi:"),
                        React.createElement(AutocompleteSelect, {
                            options: AIRCRAFT_TYPES.map(type => ({ value: type, label: type })),
                            value: newAircraft.aircraftType,
                            onChange: (value) => handleInputChange({ target: { name: 'aircraftType', value } }),
                            placeholder: "Tip Seçin",
                            className: "p-2 border rounded w-full"
                        })
                    ),
                    React.createElement("div", { className: "lg:col-span-1" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Kuyruk Numarası:"),
                        React.createElement("input", { type: "text", name: "tailNumber", value: newAircraft.tailNumber, onChange: handleInputChange, placeholder: "Kuyruk No", className: "p-2 border rounded w-full" })
                    ),
                    React.createElement("div", { className: "lg:col-span-1" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Firma Adı:"),
                        React.createElement("input", { type: "text", name: "company", value: newAircraft.company, onChange: handleInputChange, placeholder: "Firma Adı", className: "p-2 border rounded w-full" })
                    ),
                    React.createElement("div", { className: "lg:col-span-1" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Çağrı Kodu:"),
                        React.createElement("input", { type: "text", name: "callSign", value: newAircraft.callSign, onChange: handleInputChange, placeholder: "Çağrı Kodu", className: "p-2 border rounded w-full" })
                    ),
                    React.createElement("div", { className: "lg:col-span-1" },
                         React.createElement("button", { onClick: handleAddAircraft, className: "w-full py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Ekle")
                    )
                )
            ),
            React.createElement("div", null,
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700 mb-2" }, "Mevcut Hava Araçları"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                React.createElement("th", { className: "p-3 w-10" }, React.createElement("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedIds.size === aircraftData.length && aircraftData.length > 0 })),
                                ['Kuyruk No', 'Firma', 'Tip', 'Çağrı Kodu'].map(h => React.createElement("th", { key: h, className: "p-3 text-left font-semibold text-slate-600" }, h))
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            aircraftData.map(aircraft => (
                                React.createElement("tr", { key: aircraft.id, onDoubleClick: () => setEditingAircraft(aircraft), className: "hover:bg-slate-50 cursor-pointer" },
                                    React.createElement("td", { className: "p-3" }, React.createElement("input", { type: "checkbox", checked: selectedIds.has(aircraft.id), onChange: () => handleSelect(aircraft.id) })),
                                    React.createElement("td", { className: "p-3" }, aircraft.tailNumber),
                                    React.createElement("td", { className: "p-3" }, aircraft.company),
                                    React.createElement("td", { className: "p-3" }, aircraft.aircraftType),
                                    React.createElement("td", { className: "p-3" }, aircraft.callSign)
                                )
                            ))
                        )
                    )
                ),
                selectedIds.size > 0 &&
                React.createElement("button", { onClick: handleDeleteSelected, className: "mt-4 py-2 px-4 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600" }, "Seçilenleri Sil")
            ),
            React.createElement(Modal, { isOpen: !!editingAircraft, onClose: () => setEditingAircraft(null), title: "Hava Aracı Düzenle" },
                editingAircraft && (
                    React.createElement("div", { className: "space-y-4" },
                        React.createElement(AutocompleteSelect, {
                            options: AIRCRAFT_TYPES.map(type => ({ value: type, label: type })),
                            value: editingAircraft.aircraftType,
                            onChange: (value) => setEditingAircraft(p => p && { ...p, aircraftType: value }),
                            placeholder: "Tip Seçin veya Arayın",
                            className: "w-full p-2 border rounded"
                        }),
                        React.createElement("input", { type: "text", value: editingAircraft.tailNumber, onChange: e => setEditingAircraft(p => p && { ...p, tailNumber: e.target.value.toUpperCase() }), className: "w-full p-2 border rounded", placeholder: "Kuyruk No" }),
                        React.createElement("input", { type: "text", value: editingAircraft.company, onChange: e => setEditingAircraft(p => p && { ...p, company: e.target.value }), className: "w-full p-2 border rounded", placeholder: "Firma Adı" }),
                        React.createElement("input", { type: "text", value: editingAircraft.callSign, onChange: e => setEditingAircraft(p => p && { ...p, callSign: e.target.value }), className: "w-full p-2 border rounded", placeholder: "Çağrı Kodu" }),
                        React.createElement("div", { className: "flex justify-end gap-3 pt-2" },
                            React.createElement("button", { onClick: () => setEditingAircraft(null), className: "py-2 px-5 bg-slate-200 text-slate-700 rounded-lg font-semibold hover:bg-slate-300" }, "İptal"),
                            React.createElement("button", { onClick: handleUpdateAircraft, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Kaydet")
                        )
                    )
                )
            )
        )
    );
};

// From components/TankerDataManagement.tsx
const TankerDataManagement = ({ tankerData, onUpdate, showMessage }) => {
    const [newTanker, setNewTanker] = useState({ plate: '', region: '', company: '', capacity: '' });
    const [editingTanker, setEditingTanker] = useState(null);
    const [selectedIds, setSelectedIds] = useState(new Set());
    
    const handleInputChange = (e) => {
        setNewTanker(prev => ({ ...prev, [e.target.name]: e.target.value }));
    };

    const handleAddTanker = () => {
        if (!newTanker.plate || !newTanker.region || !newTanker.company || !newTanker.capacity) {
            showMessage('Lütfen tüm alanları doldurun.', 'error');
            return;
        }
        const updatedList = [...tankerData, { ...newTanker, id: `tk-${Date.now()}`, plate: newTanker.plate.toUpperCase(), capacity: parseFloat(newTanker.capacity) }];
        onUpdate(updatedList);
        showMessage('Tanker başarıyla eklendi.', 'success');
        setNewTanker({ plate: '', region: '', company: '', capacity: '' });
    };

    const handleUpdateTanker = () => {
        if (!editingTanker) return;
        const updatedList = tankerData.map(t => (t.id === editingTanker.id ? { ...editingTanker, capacity: parseFloat(String(editingTanker.capacity)) } : t));
        onUpdate(updatedList);
        showMessage('Tanker güncellendi.', 'success');
        setEditingTanker(null);
    };

    const handleDeleteSelected = () => {
        if (selectedIds.size === 0) {
            showMessage('Lütfen silmek için en az bir kayıt seçin.', 'error');
            return;
        }
        const updatedList = tankerData.filter(t => !selectedIds.has(t.id));
        onUpdate(updatedList);
        showMessage(`${selectedIds.size} tanker kaydı silindi.`, 'success');
        setSelectedIds(new Set());
    };

    const handleSelect = (id) => {
        setSelectedIds(prev => {
            const newSet = new Set(prev);
            if (newSet.has(id)) newSet.delete(id);
            else newSet.add(id);
            return newSet;
        });
    };

    const handleSelectAll = (e) => {
        if (e.target.checked) {
            setSelectedIds(new Set(tankerData.map(t => t.id)));
        } else {
            setSelectedIds(new Set());
        }
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("div", { className: "p-4 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Manuel Tanker Ekle"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4" },
                    React.createElement("input", { type: "text", name: "plate", value: newTanker.plate, onChange: handleInputChange, placeholder: "Tanker Plakası", className: "p-2 border rounded" }),
                    React.createElement("input", { type: "text", name: "region", value: newTanker.region, onChange: handleInputChange, placeholder: "Konuşlu Bölge", className: "p-2 border rounded" }),
                    React.createElement("input", { type: "text", name: "company", value: newTanker.company, onChange: handleInputChange, placeholder: "Firma Adı", className: "p-2 border rounded" }),
                    React.createElement("input", { type: "number", name: "capacity", value: newTanker.capacity, onChange: handleInputChange, placeholder: "Kapasite (Litre)", className: "p-2 border rounded" })
                ),
                React.createElement("button", { onClick: handleAddTanker, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Ekle")
            ),
            React.createElement("div", null,
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700 mb-2" }, "Mevcut Tankerler"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                React.createElement("th", { className: "p-3 w-10" }, React.createElement("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedIds.size === tankerData.length && tankerData.length > 0 })),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Plaka"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Bölge"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Firma"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Kapasite (lt)")
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            tankerData.map(tanker => (
                                React.createElement("tr", { key: tanker.id, onDoubleClick: () => setEditingTanker(tanker), className: "hover:bg-slate-50 cursor-pointer" },
                                    React.createElement("td", { className: "p-3" }, React.createElement("input", { type: "checkbox", checked: selectedIds.has(tanker.id), onChange: () => handleSelect(tanker.id) })),
                                    React.createElement("td", { className: "p-3" }, tanker.plate),
                                    React.createElement("td", { className: "p-3" }, tanker.region),
                                    React.createElement("td", { className: "p-3" }, tanker.company),
                                    React.createElement("td", { className: "p-3" }, tanker.capacity)
                                )
                            ))
                        )
                    )
                ),
                selectedIds.size > 0 &&
                React.createElement("button", { onClick: handleDeleteSelected, className: "mt-4 py-2 px-4 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600" }, "Seçilenleri Sil")
            ),
            React.createElement(Modal, { isOpen: !!editingTanker, onClose: () => setEditingTanker(null), title: "Tanker Düzenle" },
                editingTanker && (
                    React.createElement("div", { className: "space-y-4" },
                        React.createElement("input", { type: "text", value: editingTanker.plate, onChange: e => setEditingTanker(p => p && { ...p, plate: e.target.value.toUpperCase() }), className: "w-full p-2 border rounded", placeholder: "Tanker Plakası" }),
                        React.createElement("input", { type: "text", value: editingTanker.region, onChange: e => setEditingTanker(p => p && { ...p, region: e.target.value }), className: "w-full p-2 border rounded", placeholder: "Konuşlu Bölge" }),
                        React.createElement("input", { type: "text", value: editingTanker.company, onChange: e => setEditingTanker(p => p && { ...p, company: e.target.value }), className: "w-full p-2 border rounded", placeholder: "Firma Adı" }),
                        React.createElement("input", { type: "number", value: editingTanker.capacity, onChange: e => setEditingTanker(p => p && { ...p, capacity: Number(e.target.value) }), className: "w-full p-2 border rounded", placeholder: "Kapasite (Litre)" }),
                        React.createElement("div", { className: "flex justify-end gap-3 pt-2" },
                            React.createElement("button", { onClick: () => setEditingTanker(null), className: "py-2 px-5 bg-slate-200 text-slate-700 rounded-lg font-semibold hover:bg-slate-300" }, "İptal"),
                            React.createElement("button", { onClick: handleUpdateTanker, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Kaydet")
                        )
                    )
                )
            )
        )
    );
};

// From components/ApprovalRequests.tsx
const ApprovalRequestsComponent = ({ approvalRequests, personnelApprovalRequests, onHandleEditApproval, onHandlePersonnelApproval }) => {
    const [selectedRequest, setSelectedRequest] = useState(null);
    const [selectedPersonnelRequest, setSelectedPersonnelRequest] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleApprove = async () => {
        if (!selectedRequest || isSubmitting) return;
        setIsSubmitting(true);
        try {
            await onHandleEditApproval(selectedRequest, true);
            setSelectedRequest(null);
        } catch (error) {
            console.error("Approval failed, keeping modal open.", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleReject = async () => {
        if (!selectedRequest || isSubmitting) return;
        setIsSubmitting(true);
        try {
            await onHandleEditApproval(selectedRequest, false);
            setSelectedRequest(null);
        } catch (error) {
            console.error("Rejection failed, keeping modal open.", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const handlePersonnelApprove = async () => {
        if (!selectedPersonnelRequest || isSubmitting) return;
        setIsSubmitting(true);
        try {
            await onHandlePersonnelApproval(selectedPersonnelRequest.id, true);
            setSelectedPersonnelRequest(null);
        } catch (error) {
            console.error("Personnel approval failed, keeping modal open.", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const handlePersonnelReject = async () => {
        if (!selectedPersonnelRequest || isSubmitting) return;
        setIsSubmitting(true);
        try {
            await onHandlePersonnelApproval(selectedPersonnelRequest.id, false);
            setSelectedPersonnelRequest(null);
        } catch (error) {
            console.error("Personnel rejection failed, keeping modal open.", error);
        } finally {
            setIsSubmitting(false);
        }
    };

    const renderChanges = (original, changes) => {
        return (
            React.createElement("div", { className: "grid grid-cols-1 gap-y-2 text-sm" },
                Object.keys(changes).map(key => {
                    const translatedKey = FIELD_TRANSLATIONS[key] || key;
                    const originalValue = key === 'date' && original.date ? formatDisplayDateOnly(original.date) : String(original[key] ?? '-');
                    const changedValue = key === 'date' && changes.date ? formatDisplayDateOnly(changes.date) : String(changes[key] ?? '-');
                    return (
                        React.createElement("div", { key: key, className: "grid grid-cols-[auto,1fr] gap-x-2 items-center" },
                            React.createElement("div", { className: "text-slate-500 font-semibold" }, translatedKey, ":"),
                            React.createElement("div", { className: "flex items-center gap-2" },
                                React.createElement("span", { className: "line-through text-red-500" }, originalValue),
                                React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-4 w-4 text-slate-400", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor" },
                                    React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M17 8l4 4m0 0l-4 4m4-4H3" })
                                ),
                                React.createElement("span", { className: "text-green-600 font-semibold" }, changedValue)
                            )
                        )
                    );
                })
            )
        );
    };

    const renderOriginalRecord = (record) => {
        return (
            React.createElement("div", { className: "grid grid-cols-[max-content,1fr] gap-x-4 gap-y-1 text-sm" },
                record.kayitNumarasi && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.kayitNumarasi, ":"), React.createElement("span", { className: "text-slate-800" }, formatDisplayDate(record.kayitNumarasi)))
                ),
                record.date && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.date, ":"), React.createElement("span", { className: "text-slate-800" }, formatDisplayDateOnly(record.date)))
                ),
                record.recordType && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.recordType, ":"), React.createElement("span", { className: "text-slate-800" }, RECORD_TYPE_TRANSLATIONS[record.recordType] || record.recordType))
                ),
                record.personnelName && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.personnelName, ":"), React.createElement("span", { className: "text-slate-800" }, record.personnelName))
                ),
                record.jobTitle && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.jobTitle, ":"), React.createElement("span", { className: "text-slate-800" }, record.jobTitle))
                ),
                record.receiptNumber && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.receiptNumber, ":"), React.createElement("span", { className: "text-slate-800" }, record.receiptNumber))
                ),
                record.fuelAmount != null && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.fuelAmount, ":"), React.createElement("span", { className: "text-slate-800" }, record.fuelAmount))
                ),
                record.locationType && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.locationType, ":"), React.createElement("span", { className: "text-slate-800" }, record.locationType))
                ),
                record.location && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.location, ":"), React.createElement("span", { className: "text-slate-800" }, record.location))
                ),
                record.tailNumber && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.tailNumber, ":"), React.createElement("span", { className: "text-slate-800" }, record.tailNumber))
                ),
                record.cardNumber && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.cardNumber, ":"), React.createElement("span", { className: "text-slate-800" }, record.cardNumber))
                ),
                record.tankerPlate && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.tankerPlate, ":"), React.createElement("span", { className: "text-slate-800" }, record.tankerPlate))
                ),
                record.receivingTankerPlate && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.receivingTankerPlate, ":"), React.createElement("span", { className: "text-slate-800" }, record.receivingTankerPlate))
                ),
                record.fillingTankerPlate && (
                    React.createElement(React.Fragment, null, React.createElement("span", { className: "font-semibold text-slate-500" }, FIELD_TRANSLATIONS.fillingTankerPlate, ":"), React.createElement("span", { className: "text-slate-800" }, record.fillingTankerPlate))
                )
            )
        );
    };
    
    const editRequestHeaders = ['kayitNumarasi', 'date', 'personnelName', 'location', 'requesterName'];

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("div", null,
                React.createElement("h2", { className: "text-xl font-semibold text-slate-700 mb-4" }, "Bekleyen Düzeltme Talepleri"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                editRequestHeaders.map(key => (
                                    React.createElement("th", { key: key, className: "p-3 text-left font-semibold text-slate-600" }, FIELD_TRANSLATIONS[key] || key)
                                ))
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            approvalRequests.length > 0 ? (
                                approvalRequests.map(req => (
                                    React.createElement("tr", { key: req.id, onClick: () => setSelectedRequest(req), className: "hover:bg-slate-50 cursor-pointer" },
                                        React.createElement("td", { className: "p-3" }, formatDisplayDate(req.originalRecord.kayitNumarasi)),
                                        React.createElement("td", { className: "p-3" }, formatDisplayDateOnly(req.originalRecord.date)),
                                        React.createElement("td", { className: "p-3" }, req.originalRecord.personnelName),
                                        React.createElement("td", { className: "p-3" }, req.originalRecord.location),
                                        React.createElement("td", { className: "p-3" }, req.requesterName)
                                    )
                                ))
                            ) : (
                                React.createElement("tr", null,
                                    React.createElement("td", { colSpan: editRequestHeaders.length, className: "text-center p-6 text-slate-500" }, "Bekleyen düzeltme talebi bulunmamaktadır.")
                                )
                            )
                        )
                    )
                )
            ),
             React.createElement("div", null,
                React.createElement("h2", { className: "text-xl font-semibold text-slate-700 mb-4" }, "Yeni Personel Kayıt Talepleri"),
                 React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                ['Ad Soyad', 'Meslek', 'Talep Tarihi'].map(header => (
                                    React.createElement("th", { key: header, className: "p-3 text-left font-semibold text-slate-600" }, header)
                                ))
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            personnelApprovalRequests.length > 0 ? (
                                personnelApprovalRequests.map(req => (
                                    React.createElement("tr", { key: req.id, onClick: () => setSelectedPersonnelRequest(req), className: "hover:bg-slate-50 cursor-pointer" },
                                        React.createElement("td", { className: "p-3" }, req.name),
                                        React.createElement("td", { className: "p-3" }, req.job),
                                        React.createElement("td", { className: "p-3" }, new Date(req.timestamp).toLocaleString('tr-TR'))
                                    )
                                ))
                            ) : (
                                React.createElement("tr", null,
                                    React.createElement("td", { colSpan: 3, className: "text-center p-6 text-slate-500" }, "Bekleyen personel kayıt talebi bulunmamaktadır.")
                                )
                            )
                        )
                    )
                )
            ),
            React.createElement(Modal, {
                isOpen: !!selectedRequest,
                onClose: () => setSelectedRequest(null),
                title: `Talep Detayları`
            },
                selectedRequest && (
                    React.createElement("div", { className: "space-y-4" },
                        React.createElement("div", { className: "p-3 bg-slate-50 rounded-md border" },
                            React.createElement("h4", { className: "font-bold text-slate-600 mb-2 border-b pb-2" }, "Orijinal Kayıt Bilgileri"),
                             renderOriginalRecord(selectedRequest.originalRecord)
                        ),
                        React.createElement("div", { className: "p-3 bg-slate-50 rounded-md border" },
                            React.createElement("h4", { className: "font-bold text-slate-600 mb-2 border-b pb-2" }, "Talep Edilen Değişiklikler"),
                            renderChanges(selectedRequest.originalRecord, selectedRequest.requestedChanges)
                        ),
                        React.createElement("div", { className: "flex justify-end gap-3 pt-2" },
                            React.createElement("button", { onClick: handleReject, disabled: isSubmitting, className: "py-2 px-5 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600 disabled:bg-slate-400" }, isSubmitting ? 'İşleniyor...' : "Reddet"),
                            React.createElement("button", { onClick: handleApprove, disabled: isSubmitting, className: "py-2 px-5 bg-green-500 text-white rounded-lg font-semibold hover:bg-green-600 disabled:bg-slate-400" }, isSubmitting ? 'İşleniyor...' : "Onayla")
                        )
                    )
                )
            ),
            React.createElement(Modal, { isOpen: !!selectedPersonnelRequest, onClose: () => setSelectedPersonnelRequest(null), title: "Yeni Personel Onay Talebi" },
                selectedPersonnelRequest && (
                    React.createElement("div", { className: "space-y-4" },
                         React.createElement("div", { className: "p-3 bg-slate-50 rounded-md border space-y-2 text-sm" },
                            React.createElement("div", null, React.createElement("strong", { className: "text-slate-600" }, "Ad Soyad: "), selectedPersonnelRequest.name),
                            React.createElement("div", null, React.createElement("strong", { className: "text-slate-600" }, "Meslek: "), selectedPersonnelRequest.job)
                        ),
                        React.createElement("div", { className: "flex justify-end gap-3 pt-2" },
                            React.createElement("button", { onClick: handlePersonnelReject, disabled: isSubmitting, className: "py-2 px-5 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600 disabled:bg-slate-400" }, isSubmitting ? 'İşleniyor...' : "Reddet"),
                            React.createElement("button", { onClick: handlePersonnelApprove, disabled: isSubmitting, className: "py-2 px-5 bg-green-500 text-white rounded-lg font-semibold hover:bg-green-600 disabled:bg-slate-400" }, isSubmitting ? 'İşleniyor...' : "Onayla")
                        )
                    )
                )
            )
        )
    );
};

// From components/PersonnelDataManagement.tsx
const PersonnelDataManagement = ({ personnelList, onUpdate, showMessage }) => {
    const [newPersonnel, setNewPersonnel] = useState({ name: '', job: '' });
    const [editingPersonnel, setEditingPersonnel] = useState(null);
    const [selectedIds, setSelectedIds] = useState(new Set());

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewPersonnel(prev => ({ ...prev, [name]: value }));
    };

    const handleAddPersonnel = () => {
        if (!newPersonnel.name || !newPersonnel.job) {
            showMessage('Lütfen tüm alanları doldurun.', 'error');
            return;
        }
        const updatedList = [...personnelList, { ...newPersonnel, id: `p${Date.now()}` }];
        onUpdate(updatedList);
        showMessage('Personel başarıyla eklendi.', 'success');
        setNewPersonnel({ name: '', job: '' });
    };

    const handleUpdatePersonnel = () => {
        if (!editingPersonnel) return;
        const updatedList = personnelList.map(p => (p.id === editingPersonnel.id ? editingPersonnel : p));
        onUpdate(updatedList);
        showMessage('Personel güncellendi.', 'success');
        setEditingPersonnel(null);
    };

    const handleDeleteSelected = () => {
        if (selectedIds.size === 0) {
            showMessage('Lütfen silmek için en az bir kayıt seçin.', 'error');
            return;
        }
        const updatedList = personnelList.filter(p => !selectedIds.has(p.id));
        onUpdate(updatedList);
        showMessage(`${selectedIds.size} personel kaydı silindi.`, 'success');
        setSelectedIds(new Set());
    };

    const handleSelect = (id) => {
        setSelectedIds(prev => {
            const newSet = new Set(prev);
            if (newSet.has(id)) newSet.delete(id);
            else newSet.add(id);
            return newSet;
        });
    };

    const handleSelectAll = (e) => {
        if (e.target.checked) {
            setSelectedIds(new Set(personnelList.map(p => p.id)));
        } else {
            setSelectedIds(new Set());
        }
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("div", { className: "p-4 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Manuel Personel Ekle"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4" },
                    React.createElement("input", { type: "text", name: "name", value: newPersonnel.name, onChange: handleInputChange, placeholder: "Adı Soyadı", className: "p-2 border rounded" }),
                     React.createElement(AutocompleteSelect, {
                        options: [{value: 'Pilot', label: 'Pilot'}, {value: 'Uçuş Teknisyeni', label: 'Uçuş Teknisyeni'}, {value: 'Şoför', label: 'Şoför'}],
                        value: newPersonnel.job,
                        onChange: (value) => handleInputChange({ target: { name: 'job', value } }),
                        placeholder: "Meslek Seçiniz",
                        className: "p-2 border rounded"
                    }),
                    React.createElement("button", { onClick: handleAddPersonnel, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Ekle")
                )
            ),
            React.createElement("div", null,
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700 mb-2" }, "Mevcut Personeller"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                React.createElement("th", { className: "p-3 w-10" }, React.createElement("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedIds.size === personnelList.length && personnelList.length > 0 })),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Adı Soyadı"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Mesleği")
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            personnelList.map(person => (
                                React.createElement("tr", { key: person.id, onDoubleClick: () => setEditingPersonnel(person), className: "hover:bg-slate-50 cursor-pointer" },
                                    React.createElement("td", { className: "p-3" }, React.createElement("input", { type: "checkbox", checked: selectedIds.has(person.id), onChange: () => handleSelect(person.id) })),
                                    React.createElement("td", { className: "p-3" }, person.name),
                                    React.createElement("td", { className: "p-3" }, person.job)
                                )
                            ))
                        )
                    )
                ),
                selectedIds.size > 0 &&
                React.createElement("button", { onClick: handleDeleteSelected, className: "mt-4 py-2 px-4 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600" }, "Seçilenleri Sil")
            ),
            React.createElement(Modal, { isOpen: !!editingPersonnel, onClose: () => setEditingPersonnel(null), title: "Personel Düzenle" },
                editingPersonnel && (
                    React.createElement("div", { className: "space-y-4" },
                        React.createElement("input", { type: "text", value: editingPersonnel.name, onChange: e => setEditingPersonnel(p => p && { ...p, name: e.target.value }), className: "w-full p-2 border rounded", placeholder: "Adı Soyadı" }),
                        React.createElement(AutocompleteSelect, {
                            options: [{value: 'Pilot', label: 'Pilot'}, {value: 'Uçuş Teknisyeni', label: 'Uçuş Teknisyeni'}, {value: 'Şoför', label: 'Şoför'}],
                            value: editingPersonnel.job,
                            onChange: (value) => setEditingPersonnel(p => p && {...p, job: value}),
                            placeholder: "Meslek Seçiniz",
                            className: "w-full p-2 border rounded"
                        }),
                        React.createElement("div", { className: "flex justify-end gap-3 pt-2" },
                            React.createElement("button", { onClick: () => setEditingPersonnel(null), className: "py-2 px-5 bg-slate-200 text-slate-700 rounded-lg font-semibold hover:bg-slate-300" }, "İptal"),
                            React.createElement("button", { onClick: handleUpdatePersonnel, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Kaydet")
                        )
                    )
                )
            )
        )
    );
};

// From components/AirportDataManagement.tsx
const AirportDataManagement = ({ airportList, onUpdate, showMessage }) => {
    const [newAirport, setNewAirport] = useState({ name: '', type: 'Sivil' });
    const [editingAirport, setEditingAirport] = useState(null);
    const [selectedIds, setSelectedIds] = useState(new Set());

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewAirport(prev => ({...prev, [name]: value}));
    };

     const handleEditInputChange = (e) => {
        const { name, value } = e.target;
        setEditingAirport(prev => (prev ? {...prev, [name]: value} : null));
    };

    const handleAddAirport = () => {
        if (!newAirport.name) {
            showMessage('Lütfen hava limanı adını girin.', 'error');
            return;
        }
        const updatedList = [...airportList, { ...newAirport, id: `airport-${Date.now()}` }];
        onUpdate(updatedList);
        showMessage('Hava limanı başarıyla eklendi.', 'success');
        setNewAirport({ name: '', type: 'Sivil' });
    };

    const handleUpdateAirport = () => {
        if (!editingAirport) return;
        const updatedList = airportList.map(a => (a.id === editingAirport.id ? editingAirport : a));
        onUpdate(updatedList);
        showMessage('Hava limanı güncellendi.', 'success');
        setEditingAirport(null);
    };

    const handleDeleteSelected = () => {
        if (selectedIds.size === 0) {
            showMessage('Lütfen silmek için en az bir kayıt seçin.', 'error');
            return;
        }
        const updatedList = airportList.filter(a => !selectedIds.has(a.id));
        onUpdate(updatedList);
        showMessage(`${selectedIds.size} hava limanı kaydı silindi.`, 'success');
        setSelectedIds(new Set());
    };

    const handleSelect = (id) => {
        setSelectedIds(prev => {
            const newSet = new Set(prev);
            if (newSet.has(id)) newSet.delete(id);
            else newSet.add(id);
            return newSet;
        });
    };

    const handleSelectAll = (e) => {
        if (e.target.checked) {
            setSelectedIds(new Set(airportList.map(a => a.id)));
        } else {
            setSelectedIds(new Set());
        }
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("div", { className: "p-4 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Manuel Hava Limanı Ekle"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 items-end" },
                    React.createElement("input", { type: "text", name: "name", value: newAirport.name, onChange: handleInputChange, placeholder: "Hava Limanı Adı", className: "p-2 border rounded col-span-1 md:col-span-2" }),
                    React.createElement("select", {
                        name: "type",
                        value: newAirport.type,
                        onChange: handleInputChange,
                        className: "w-full p-2 border border-slate-300 rounded-md bg-white"
                    },
                        React.createElement("option", { value: "Sivil" }, "Sivil"),
                        React.createElement("option", { value: "Askeri" }, "Askeri")
                    ),
                    React.createElement("button", { onClick: handleAddAirport, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 md:col-span-3" }, "Ekle")
                )
            ),
            React.createElement("div", null,
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700 mb-2" }, "Mevcut Hava Limanları"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                React.createElement("th", { className: "p-3 w-10" }, React.createElement("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedIds.size === airportList.length && airportList.length > 0 })),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Hava Limanı Adı"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Tipi")
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            airportList.map(airport => (
                                React.createElement("tr", { key: airport.id, onDoubleClick: () => setEditingAirport(airport), className: "hover:bg-slate-50 cursor-pointer" },
                                    React.createElement("td", { className: "p-3" }, React.createElement("input", { type: "checkbox", checked: selectedIds.has(airport.id), onChange: () => handleSelect(airport.id) })),
                                    React.createElement("td", { className: "p-3" }, airport.name),
                                    React.createElement("td", { className: "p-3" },
                                        React.createElement("span", { className: `px-2 py-1 rounded-full text-xs font-semibold ${airport.type === 'Askeri' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'}` }, airport.type)
                                    )
                                )
                            ))
                        )
                    )
                ),
                selectedIds.size > 0 &&
                React.createElement("button", { onClick: handleDeleteSelected, className: "mt-4 py-2 px-4 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600" }, "Seçilenleri Sil")
            ),
            React.createElement(Modal, { isOpen: !!editingAirport, onClose: () => setEditingAirport(null), title: "Hava Limanı Düzenle" },
                editingAirport && (
                    React.createElement("div", { className: "space-y-4" },
                        React.createElement("input", { type: "text", name: "name", value: editingAirport.name, onChange: handleEditInputChange, className: "w-full p-2 border rounded", placeholder: "Hava Limanı Adı" }),
                        React.createElement("select", {
                            name: "type",
                            value: editingAirport.type,
                            onChange: handleEditInputChange,
                            className: "w-full p-2 border border-slate-300 rounded-md bg-white"
                        },
                            React.createElement("option", { value: "Sivil" }, "Sivil"),
                            React.createElement("option", { value: "Askeri" }, "Askeri")
                        ),
                        React.createElement("div", { className: "flex justify-end gap-3 pt-2" },
                            React.createElement("button", { onClick: () => setEditingAirport(null), className: "py-2 px-5 bg-slate-200 text-slate-700 rounded-lg font-semibold hover:bg-slate-300" }, "İptal"),
                            React.createElement("button", { onClick: handleUpdateAirport, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Kaydet")
                        )
                    )
                )
            )
        )
    );
};

// From components/UserManagement.tsx
const UserManagement = ({ adminCredentials, onAddUser, onDeleteUser, showMessage }) => {
    const [newUser, setNewUser] = useState({ name: '', username: '', password: '' });

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setNewUser(prev => ({ ...prev, [name]: value }));
    };

    const handleAddUser = () => {
        if (!newUser.name || !newUser.username || !newUser.password) {
            showMessage('Lütfen tüm alanları doldurun.', 'error');
            return;
        }
        if (adminCredentials.some(u => u.username === newUser.username)) {
            showMessage('Bu kullanıcı adı zaten mevcut.', 'error');
            return;
        }
        const userToAdd = { ...newUser, id: `user-${Date.now()}` };
        onAddUser(userToAdd);
        showMessage('Yeni kullanıcı başarıyla eklendi.', 'success');
        setNewUser({ name: '', username: '', password: '' });
    };

    const handleDeleteUser = (userId) => {
        if (adminCredentials.length <= 1) {
            showMessage('En az bir yönetici kalmalıdır.', 'error');
            return;
        }
        onDeleteUser(userId);
        showMessage('Kullanıcı silindi.', 'success');
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("div", { className: "p-4 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Yeni Kullanıcı Ekle"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-4" },
                    React.createElement("input", { type: "text", name: "name", value: newUser.name, onChange: handleInputChange, placeholder: "Adı Soyadı", className: "p-2 border rounded" }),
                    React.createElement("input", { type: "text", name: "username", value: newUser.username, onChange: handleInputChange, placeholder: "Kullanıcı Adı", className: "p-2 border rounded" }),
                    React.createElement("input", { type: "password", name: "password", value: newUser.password, onChange: handleInputChange, placeholder: "Parola", className: "p-2 border rounded" }),
                    React.createElement("button", { onClick: handleAddUser, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700" }, "Ekle")
                )
            ),
            React.createElement("div", null,
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700 mb-2" }, "Mevcut Kullanıcılar"),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Adı Soyadı"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "Kullanıcı Adı"),
                                React.createElement("th", { className: "p-3 text-left font-semibold text-slate-600" }, "İşlem")
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            adminCredentials.map(user => (
                                React.createElement("tr", { key: user.id },
                                    React.createElement("td", { className: "p-3" }, user.name),
                                    React.createElement("td", { className: "p-3" }, user.username),
                                    React.createElement("td", { className: "p-3" },
                                        React.createElement("button", { onClick: () => handleDeleteUser(user.id), className: "text-red-500 hover:text-red-700" }, "Sil")
                                    )
                                )
                            ))
                        )
                    )
                )
            )
        )
    );
};

// From components/RecordManagement.tsx
const RecordManagement = ({ fuelRecords, onUpdateFuelRecords, aircraftData, tankerData, airportList, showMessage }) => {
    const [filters, setFilters] = useState({
        startDate: '',
        endDate: '',
        tailNumber: '',
        aircraftType: '',
        company: '',
        receiptNumber: '',
        tankerPlate: '',
        airport: ''
    });
    const [displayedRecords, setDisplayedRecords] = useState([]);
    const [editingRecord, setEditingRecord] = useState(null);
    const [selectedIds, setSelectedIds] = useState(new Set());

    const filterOptions = useMemo(() => {
        const tailNumbers = [...new Set(fuelRecords.map(r => r.tailNumber).filter(Boolean))].sort();
        const aircraftTypes = [...new Set(aircraftData.map(a => a.aircraftType))].sort();
        const companies = [...new Set([...aircraftData.map(a => a.company), ...tankerData.map(t => t.company)].filter(Boolean))].sort();
        const tankerPlates = [...new Set(tankerData.map(t => t.plate))].sort();
        const airports = [...new Set(airportList.map(a => a.name))].sort();
        return { tailNumbers, aircraftTypes, companies, tankerPlates, airports };
    }, [fuelRecords, aircraftData, tankerData, airportList]);

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    };

    const runFilter = () => {
        const aircraftInfoMap = new Map(aircraftData.map(a => [a.tailNumber, { type: a.aircraftType, company: a.company }]));
        return fuelRecords.filter(record => {
            if (filters.startDate && record.date < filters.startDate) return false;
            if (filters.endDate && record.date > filters.endDate) return false;
            if (filters.tailNumber && record.tailNumber !== filters.tailNumber) return false;
            if (filters.receiptNumber && !(record.receiptNumber || '').includes(filters.receiptNumber)) return false;

            const recordTankerPlate = record.tankerPlate || record.receivingTankerPlate || record.fillingTankerPlate;
            if (filters.tankerPlate && record.location !== filters.tankerPlate && recordTankerPlate !== filters.tankerPlate) return false;
            
            if (filters.airport && record.location !== filters.airport) return false;

            const aircraftInfo = record.tailNumber ? aircraftInfoMap.get(record.tailNumber) : null;
            if (filters.aircraftType && (!aircraftInfo || aircraftInfo.type !== filters.aircraftType)) return false;
            if (filters.company && (!aircraftInfo || aircraftInfo.company !== filters.company)) return false;

            return true;
        });
    }

    const handleSearch = () => {
        const filtered = runFilter();
        if (filtered.length === 0) {
            showMessage('Filtrelerle eşleşen veri bulunamadı.', 'error');
        }
        setDisplayedRecords(filtered);
        setSelectedIds(new Set());
    };

    const handleDeleteSelected = () => {
        if (selectedIds.size === 0) {
            showMessage('Lütfen silmek için en az bir kayıt seçin.', 'error');
            return;
        }
        const updatedList = fuelRecords.filter(rec => !selectedIds.has(rec.id));
        onUpdateFuelRecords(updatedList);
        setDisplayedRecords(prev => prev.filter(rec => !selectedIds.has(rec.id)));
        showMessage(`${selectedIds.size} kayıt silindi.`, 'success');
        setSelectedIds(new Set());
    };

    const handleSelect = (id) => {
        setSelectedIds(prev => {
            const newSet = new Set(prev);
            if (newSet.has(id)) newSet.delete(id);
            else newSet.add(id);
            return newSet;
        });
    };

    const handleSelectAll = (e) => {
        if (e.target.checked) {
            setSelectedIds(new Set(displayedRecords.map(r => r.id)));
        } else {
            setSelectedIds(new Set());
        }
    };

    const getReceiptLink = (record) => {
        if (record.recordType === 'tankerDolum' || record.recordType === 'tankerTransfer') {
            return "https://bulut.ogm.gov.tr/TANKERYAKITT1";
        }
        if (record.recordType === 'personnel' && record.tailNumber) {
            const aircraft = aircraftData.find(a => a.tailNumber === record.tailNumber);
            if (!aircraft) return null;
            const companyName = aircraft.company?.toLowerCase().trim() || '';
            const ogmCompanies = ['ogm', 'orman'];
            if (ogmCompanies.some(ogmComp => companyName.includes(ogmComp))) {
                return "https://bulut.ogm.gov.tr/OGMMAKBUZ";
            } else {
                return "https://bulut.ogm.gov.tr/KIRALIKYAKIT1";
            }
        }
        return null;
    };

    const handleExport = (format) => {
        if (displayedRecords.length === 0) {
            showMessage('Lütfen önce veri aratın.', 'error');
            return;
        }
        const headers = ['Kayıt No', 'Tarih', 'Personel Adı', 'Mesleği', 'İkmal Tipi', 'Konum', 'Makbuz Numarası', 'Kuyruk No', 'Kart No', 'Yakıt (lt)'];
        const data = displayedRecords.map(record => [
            formatDisplayDate(record.kayitNumarasi),
            formatDisplayDateOnly(record.date),
            record.personnelName || '--',
            record.jobTitle || '-',
            record.locationType || '--',
            record.location || '--',
            record.receiptNumber || '--',
            record.tailNumber || '-',
            record.cardNumber || '-',
            record.fuelAmount ? record.fuelAmount.toFixed(2) : '0.00'
        ]);

        if (format === 'xlsx') {
            const worksheet = XLSX.utils.aoa_to_sheet([headers, ...data]);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Yakıt Kayıtları');
            XLSX.writeFile(workbook, 'yakit_kayitlari_raporu.xlsx');
        }
        showMessage(`Rapor ${format.toUpperCase()} olarak başarıyla oluşturuldu.`, 'success');
    };


    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("h2", { className: "text-xl font-semibold text-slate-700" }, "Makbuz Yönetimi"),
            React.createElement("div", { className: "p-6 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Filtreleme Seçenekleri"),
                React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" },
                    React.createElement("input", { type: "date", name: "startDate", value: filters.startDate, onChange: handleFilterChange, className: "w-full p-2 border border-slate-300 rounded-md" }),
                    React.createElement("input", { type: "date", name: "endDate", value: filters.endDate, onChange: handleFilterChange, className: "w-full p-2 border border-slate-300 rounded-md" }),
                    React.createElement("input", { type: "text", name: "receiptNumber", value: filters.receiptNumber, onChange: handleFilterChange, className: "w-full p-2 border border-slate-300 rounded-md", placeholder: "Makbuz No Girin" }),
                    React.createElement(AutocompleteSelect, { options: filterOptions.tankerPlates.map(p => ({ value: p, label: p })), value: filters.tankerPlate, onChange: (v) => handleFilterChange({target:{name:'tankerPlate',value:v}}), placeholder: "Plaka Filtrele", className: "w-full p-2 border border-slate-300 rounded-md" }),
                    React.createElement(AutocompleteSelect, { options: filterOptions.airports.map(a => ({ value: a, label: a })), value: filters.airport, onChange: (v) => handleFilterChange({target:{name:'airport',value:v}}), placeholder: "Hava Limanı Filtrele", className: "w-full p-2 border border-slate-300 rounded-md" }),
                    React.createElement(AutocompleteSelect, { options: filterOptions.tailNumbers.map(tn => ({ value: tn, label: tn })), value: filters.tailNumber, onChange: (v) => handleFilterChange({target:{name:'tailNumber',value:v}}), placeholder: "Kuyruk No Filtrele", className: "w-full p-2 border border-slate-300 rounded-md" }),
                    React.createElement(AutocompleteSelect, { options: filterOptions.aircraftTypes.map(t => ({ value: t, label: t })), value: filters.aircraftType, onChange: (v) => handleFilterChange({target:{name:'aircraftType',value:v}}), placeholder: "Tip Filtrele", className: "w-full p-2 border border-slate-300 rounded-md" }),
                    React.createElement(AutocompleteSelect, { options: filterOptions.companies.map(c => ({ value: c, label: c })), value: filters.company, onChange: (v) => handleFilterChange({target:{name:'company',value:v}}), placeholder: "Firma Filtrele", className: "w-full p-2 border border-slate-300 rounded-md" })
                ),
                React.createElement("div", { className: "pt-4" },
                     React.createElement("button", { onClick: handleSearch, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 transition-colors" }, "Ara")
                )
            ),
             React.createElement("div", { className: "mt-4" },
                React.createElement("div", { className: "flex justify-between items-center mb-2" },
                    React.createElement("h3", { className: "text-xl font-semibold text-slate-700" }, "Sonuçlar"),
                    React.createElement("div", { className: "flex items-center gap-2" },
                        selectedIds.size > 0 && React.createElement("button", { onClick: handleDeleteSelected, className: "py-2 px-4 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600" }, "Seçilenleri Sil"),
                        displayedRecords.length > 0 && React.createElement("button", { onClick: () => handleExport('xlsx'), title: "Excel Olarak İndir", className: "p-2 bg-green-600 text-white rounded-md hover:bg-green-700" },
                             React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2 }, React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" }))
                        )
                    )
                ),
                React.createElement("div", { className: "overflow-x-auto border border-slate-200 rounded-lg" },
                    React.createElement("table", { className: "min-w-full bg-white text-sm" },
                        React.createElement("thead", { className: "bg-slate-100" },
                            React.createElement("tr", null,
                                React.createElement("th", { className: "p-3 w-10" }, React.createElement("input", { type: "checkbox", onChange: handleSelectAll, checked: selectedIds.size === displayedRecords.length && displayedRecords.length > 0 })),
                                ['Kayıt No', 'Tarih', 'Personel', 'Meslek', 'Konum', 'Makbuz Numarası', 'Kuyruk No', 'Kart No', 'Yakıt (lt)', 'Makbuz Linki'].map(header => (
                                    React.createElement("th", { key: header, className: "p-3 text-left font-semibold text-slate-600" }, header)
                                ))
                            )
                        ),
                        React.createElement("tbody", { className: "divide-y divide-slate-200" },
                            displayedRecords.length > 0 ? displayedRecords.map(record => (
                                React.createElement("tr", { key: record.id, onDoubleClick: () => setEditingRecord(record), className: "hover:bg-slate-50 cursor-pointer" },
                                    React.createElement("td", { className: "p-3" }, React.createElement("input", { type: "checkbox", checked: selectedIds.has(record.id), onChange: () => handleSelect(record.id) })),
                                    React.createElement("td", { className: "p-3" }, formatDisplayDate(record.kayitNumarasi)),
                                    React.createElement("td", { className: "p-3" }, formatDisplayDateOnly(record.date)),
                                    React.createElement("td", { className: "p-3" }, record.personnelName || '--'),
                                    React.createElement("td", { className: "p-3" }, record.jobTitle || '-'),
                                    React.createElement("td", { className: "p-3" }, record.location || '--'),
                                    React.createElement("td", { className: "p-3" }, record.receiptNumber || '--'),
                                    React.createElement("td", { className: "p-3" }, record.tailNumber || '-'),
                                    React.createElement("td", { className: "p-3" }, record.cardNumber || '-'),
                                    React.createElement("td", { className: "p-3" }, record.fuelAmount.toFixed(2)),
                                    React.createElement("td", { className: "p-3" },
                                        (() => {
                                            const link = getReceiptLink(record);
                                            return link ? React.createElement("a", { href: link, target: "_blank", rel: "noopener noreferrer", className: "text-ogm-green-600 hover:text-ogm-green-800 hover:underline font-semibold" }, "Klasöre Git") : '-';
                                        })()
                                    )
                                )
                            )) : React.createElement("tr", null, React.createElement("td", { colSpan: 11, className: "text-center p-6 text-slate-500" }, "Arama yapmak için filtreleri kullanın."))
                        )
                    )
                )
            )
        )
    );
};

// From components/TankerTakip.tsx
const TankerTakip = ({ tankerData, fuelRecords, showMessage }) => {
    const [selectedPlate, setSelectedPlate] = useState('');
    const [report, setReport] = useState(null);

    const handleSearch = () => {
        if (!selectedPlate) {
            showMessage('Lütfen bir tanker plakası seçin.', 'error');
            return;
        }
        const selectedTanker = tankerData.find(t => t.plate === selectedPlate);
        if (!selectedTanker) {
            showMessage('Tanker bulunamadı.', 'error');
            setReport(null);
            return;
        }

        let totalIn = 0;
        let totalOut = 0;

        fuelRecords.forEach(record => {
            if (record.recordType === 'tankerDolum' && record.tankerPlate === selectedPlate) {
                totalIn += record.fuelAmount;
            }
            if (record.recordType === 'tankerTransfer' && record.receivingTankerPlate === selectedPlate) {
                totalIn += record.fuelAmount;
            }
            if (record.recordType === 'personnel' && record.locationType === 'Tanker' && record.location === selectedPlate) {
                totalOut += record.fuelAmount;
            }
            if (record.recordType === 'tankerTransfer' && record.fillingTankerPlate === selectedPlate) {
                totalOut += record.fuelAmount;
            }
        });

        const remaining = totalIn - totalOut;
        const capacity = selectedTanker.capacity || 0;
        const percentage = capacity > 0 ? (remaining / capacity) * 100 : 0;

        setReport({
            plate: selectedTanker.plate,
            capacity: capacity,
            totalIn,
            totalOut,
            remaining,
            percentage: Math.max(0, Math.min(100, percentage))
        });
    };

    const getBarColorClass = (percentage) => {
        if (percentage < 25) return 'bg-red-600';
        if (percentage < 60) return 'bg-yellow-500';
        return 'bg-ogm-green-600';
    };

    return (
        React.createElement("div", { className: "space-y-6" },
            React.createElement("h2", { className: "text-xl font-semibold text-slate-700" }, "Tanker Takip"),
            React.createElement("div", { className: "p-6 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                 React.createElement("div", { className: "flex items-end gap-4" },
                    React.createElement("div", { className: "flex-grow" },
                        React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Tanker Plakası:"),
                        React.createElement(AutocompleteSelect, {
                            options: tankerData.map(t => ({ value: t.plate, label: t.plate })),
                            value: selectedPlate,
                            onChange: (value) => setSelectedPlate(value),
                            placeholder: "Plaka Ara...",
                            className: "w-full p-2 border border-slate-300 rounded-md text-base"
                        })
                    ),
                    React.createElement("button", { onClick: handleSearch, className: "py-2 px-5 bg-ogm-green-600 text-white rounded-lg font-semibold hover:bg-ogm-green-700 transition-colors" }, "Ara")
                )
            ),
            report && React.createElement("div", { className: "p-6 bg-white rounded-lg border border-slate-200 space-y-4" },
                React.createElement("h3", { className: "text-lg font-bold text-slate-800" }, report.plate, " Durum Raporu"),
                React.createElement("div", { className: "space-y-2" },
                    React.createElement("p", { className: "text-slate-600" }, React.createElement("strong", null, "Kapasite: "), report.capacity.toLocaleString('tr-TR'), " lt"),
                    React.createElement("p", { className: "text-green-600" }, React.createElement("strong", null, "Toplam Giren Yakıt: "), report.totalIn.toLocaleString('tr-TR'), " lt"),
                    React.createElement("p", { className: "text-red-600" }, React.createElement("strong", null, "Toplam Çıkan Yakıt: "), report.totalOut.toLocaleString('tr-TR'), " lt"),
                    React.createElement("p", { className: "text-ogm-green-700 font-bold" }, React.createElement("strong", null, "Mevcut Yakıt: "), report.remaining.toLocaleString('tr-TR'), " lt")
                ),
                React.createElement("div", { className: "pt-4" },
                    React.createElement("label", { className: "font-semibold text-slate-600 mb-2 block text-sm" }, "Doluluk Oranı"),
                    React.createElement("div", { className: "w-full bg-slate-200 rounded-full h-8" },
                        React.createElement("div", {
                            className: `h-8 rounded-full text-white font-bold text-sm flex items-center justify-center transition-all duration-500 ${getBarColorClass(report.percentage)}`,
                            style: { width: `${report.percentage}%` }
                        },
                           report.percentage > 10 && `${report.percentage.toFixed(1)}%`
                        )
                    )
                )
            )
        )
    );
};

// From components/FileUpload.tsx
const FileUpload = ({ onFileUpload }) => {
    const [isDragging, setIsDragging] = useState(false);
    
    const handleFileChange = (e) => {
        if (e.target.files && e.target.files[0]) {
            onFileUpload(e.target.files[0]);
        }
    };

    const handleDrag = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === "dragenter" || e.type === "dragover") {
            setIsDragging(true);
        } else if (e.type === "dragleave") {
            setIsDragging(false);
        }
    }, []);

    const handleDrop = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
        if (e.dataTransfer.files && e.dataTransfer.files[0]) {
            onFileUpload(e.dataTransfer.files[0]);
        }
    }, [onFileUpload]);

    return (
        React.createElement("div", {
            onDragEnter: handleDrag,
            onDragLeave: handleDrag,
            onDragOver: handleDrag,
            onDrop: handleDrop,
            className: `border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
                isDragging ? 'border-ogm-green-500 bg-ogm-green-50' : 'border-slate-300 bg-white/80'
            }`
        },
            React.createElement("input", {
                type: "file",
                id: "fileInput",
                accept: ".xlsx, .csv, .pdf, .jpg, .jpeg, .png",
                onChange: handleFileChange,
                className: "hidden"
            }),
            React.createElement("label", { htmlFor: "fileInput", className: "cursor-pointer" },
                React.createElement("p", { className: "text-slate-500" }, "Dosyayı buraya sürükleyip bırakın"),
                React.createElement("p", { className: "text-slate-500 my-2" }, "veya"),
                React.createElement("span", { className: "inline-block py-2 px-4 bg-ogm-green-600 text-white rounded-md font-semibold hover:bg-ogm-green-700" }, "Dosya Seç")
            )
        )
    );
};

// From components/CriticalErrorDisplay.tsx
const CriticalErrorDisplay = ({ message }) => {
    const parts = message.split('\n\n');
    const title = parts.length > 0 ? parts[0] : 'Kritik Hata';
    const instructions = parts.slice(1);

    return (
        React.createElement("div", { className: "min-h-screen flex items-center justify-center bg-red-50 p-4 sm:p-6" },
            React.createElement("div", { className: "w-full max-w-3xl bg-white p-6 sm:p-8 rounded-2xl shadow-2xl border-2 border-red-400" },
                React.createElement("div", { className: "flex flex-col sm:flex-row items-start sm:items-center mb-6" },
                    React.createElement("div", { className: "flex-shrink-0 mb-4 sm:mb-0 sm:mr-6" },
                         React.createElement("div", { className: "w-16 h-16 bg-red-100 rounded-full flex items-center justify-center" },
                             React.createElement("svg", { className: "h-10 w-10 text-red-500", xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor" },
                                React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" })
                            )
                        )
                    ),
                    React.createElement("div", null,
                        React.createElement("h1", { className: "text-2xl sm:text-3xl font-bold text-red-800" }, title),
                         React.createElement("p", { className: "text-slate-600 mt-1" }, "Lütfen aşağıdaki adımları takip ederek sorunu çözün ve sayfayı yenileyin.")
                    )
                ),
                React.createElement("div", { className: "text-slate-700 space-y-4 bg-red-50/50 p-6 rounded-lg border border-red-200" },
                    instructions.map((instruction, index) => (
                        React.createElement("p", { key: index, className: "whitespace-pre-wrap leading-relaxed" }, instruction)
                    ))
                )
            )
        )
    );
};

// From components/AdminPanel.tsx
const NavButton = ({ label, children, badge, onClick, isActive }) => (
    React.createElement("button", {
        onClick: onClick,
        className: `w-full flex items-center p-3 text-sm font-medium rounded-lg transition-colors duration-200 shadow-sm relative ${
            isActive ? 'bg-ogm-green-800 text-white' : 'bg-ogm-green-600 text-ogm-green-100 hover:bg-ogm-green-700'
        }`
    },
        children,
        label,
        badge !== undefined && badge > 0 && (
            React.createElement("span", { className: "absolute -top-2 -right-2 bg-red-500 text-white rounded-full h-5 w-5 flex items-center justify-center text-xs font-bold" }, badge)
        )
    )
);

const UserInfo = ({ user }) => {
    if (!user || !user.loginTime) return null;

    return (
        React.createElement("div", { className: "mt-auto pt-4 border-t border-ogm-green-600 text-center text-white" },
            React.createElement("p", { className: "text-sm font-semibold" }, user.name),
            React.createElement("p", { className: "text-xs" }, `Giriş: ${user.loginTime.toLocaleTimeString('tr-TR')}`)
        )
    );
};

const AdminPanel = (props) => {
    const [activeModule, setActiveModule] = useState('dataEntry');
    const [activeDataEntryView, setActiveDataEntryView] = useState('bulkUpload');

    const handleBulkFileUpload = (file) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const data = new Uint8Array(e.target?.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const successMessages = [];
                const updates = {};

                workbook.SheetNames.forEach(sheetName => {
                    const worksheet = workbook.Sheets[sheetName];
                    const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                    if (json.length < 2) return;

                    const normalizedSheetName = sheetName.trim().toLowerCase();

                    if (normalizedSheetName === 'hava aracı verisi') {
                        const newAircrafts = (json.slice(1)).map((row, index) => {
                            if (row.length < 4 || !row[0] || !row[1] || !row[2] || !row[3]) return null;
                            return { id: `file-${Date.now()}-${index}`, tailNumber: String(row[0]).trim().toUpperCase(), company: String(row[1]).trim(), aircraftType: String(row[2]).trim(), callSign: String(row[3]).trim() };
                        }).filter(Boolean);
                        if (newAircrafts.length > 0) {
                            updates.aircraftData = [...props.aircraftData, ...newAircrafts];
                            successMessages.push(`${newAircrafts.length} hava aracı`);
                        }
                    } else if (normalizedSheetName === 'tanker verisi') {
                         const newTankers = (json.slice(1)).map((row, index) => {
                            if (row.length < 4 || !row[0] || !row[1] || !row[2] || !row[3]) return null;
                            return { id: `file-tanker-${Date.now()}-${index}`, plate: String(row[0]).trim().toUpperCase(), region: String(row[1]).trim(), company: String(row[2]).trim(), capacity: parseFloat(row[3]) || 0 };
                        }).filter(Boolean);
                        if (newTankers.length > 0) {
                            updates.tankerData = [...props.tankerData, ...newTankers];
                            successMessages.push(`${newTankers.length} tanker`);
                        }
                    } else if (normalizedSheetName === 'personel verisi') {
                        const newPersonnelList = (json.slice(1)).map((row, index) => {
                            if (row.length < 2 || !row[0] || !row[1]) return null;
                            const job = String(row[1]).trim();
                            if (!['Pilot', 'Şoför', 'Uçuş Teknisyeni'].includes(job)) return null;
                            return { id: `file-personnel-${Date.now()}-${index}`, name: String(row[0]).trim(), job: job };
                        }).filter(Boolean);
                        if (newPersonnelList.length > 0) {
                            updates.personnelList = [...props.personnelList, ...newPersonnelList];
                            successMessages.push(`${newPersonnelList.length} personel`);
                        }
                    } else if (normalizedSheetName === 'hava limanı verisi') {
                        const newAirports = (json.slice(1)).map((row, index) => {
                             if (row.length < 2 || !row[0] || !row[1]) return null;
                             const type = String(row[1]).trim();
                             if (type !== 'Sivil' && type !== 'Askeri') return null;
                             return { id: `file-airport-${Date.now()}-${index}`, name: String(row[0]).trim(), type };
                        }).filter((airport) => airport !== null);
                        if (newAirports.length > 0) {
                            updates.airportList = [...props.airportList, ...newAirports];
                            successMessages.push(`${newAirports.length} hava limanı`);
                        }
                    } else if (normalizedSheetName === 'yakıt kayıtları verisi') {
                        const headerRow = (json[0]).map(h => String(h || '').trim());
                        const colMap = {
                            tarih: headerRow.indexOf('Tarih'),
                            kayitTipi: headerRow.indexOf('Kayıt Tipi'),
                            makbuzNo: headerRow.indexOf('Makbuz Numarası'),
                            yakitMiktari: headerRow.indexOf('Yakıt Miktarı (lt)'),
                            kuyrukNo: headerRow.indexOf('Kuyruk Numarası'),
                            personelAdi: headerRow.indexOf('Personel Adı'),
                            meslegi: headerRow.indexOf('Mesleği'),
                            kartNo: headerRow.indexOf('Kart Numarası'),
                            ikmalTipi: headerRow.indexOf('İkmal Tipi'),
                            ikmalKonumu: headerRow.indexOf('İkmal Konumu'),
                            dolumYapilanTanker: headerRow.indexOf('Dolum Yapılan Tanker Plakası'),
                            dolumYapilanHavaLimani: headerRow.indexOf('Dolum Yapılan Hava Limanı'),
                            yakitiAlanTanker: headerRow.indexOf('Yakıtı Alan Tanker Plakası'),
                            yakitiVerenTanker: headerRow.indexOf('Yakıtı Veren Tanker Plakası'),
                        };

                        if (colMap.tarih === -1 || colMap.kayitTipi === -1 || colMap.makbuzNo === -1 || colMap.yakitMiktari === -1) {
                            props.showMessage('Yakıt kayıtları sayfasında zorunlu sütunlar eksik.', 'error');
                            return;
                        }
                        
                        const newFuelRecords = (json.slice(1)).map((row, index) => {
                            try {
                                if (!row || row.length === 0) return null;
                                const recordTypeStr = String(row[colMap.kayitTipi] || '').trim();
                                if (!['Hava Aracı İkmal', 'Tanker Dolum', 'Tanker Transfer'].includes(recordTypeStr)) return null;
                                const dateStr = parseSheetDate(row[colMap.tarih]);
                                if (!dateStr) return null;
                                const baseRecord = {
                                    id: `file-fuel-${Date.now()}-${index}`,
                                    kayitNumarasi: generateRecordNumber(),
                                    date: dateStr,
                                    receiptNumber: String(row[colMap.makbuzNo] || '').trim(),
                                    fuelAmount: parseFloat(String(row[colMap.yakitMiktari] || '0').replace(',', '.')) || 0,
                                };
                                if (recordTypeStr === 'Hava Aracı İkmal') {
                                    const personnelName = String(row[colMap.personelAdi] || '').trim();
                                    const personnel = props.personnelList.find(p => p.name === personnelName);
                                    return { ...baseRecord, recordType: 'personnel', personnelName, personnelId: personnel?.id, jobTitle: String(row[colMap.meslegi] || '').trim(), locationType: String(row[colMap.ikmalTipi] || '').trim(), location: String(row[colMap.ikmalKonumu] || '').trim(), tailNumber: String(row[colMap.kuyrukNo] || '').trim(), cardNumber: String(row[colMap.kartNo] || '').trim() };
                                } else if (recordTypeStr === 'Tanker Dolum') {
                                    return { ...baseRecord, recordType: 'tankerDolum', locationType: "Tanker Dolum", personnelName: 'Tanker Dolum', tankerPlate: String(row[colMap.dolumYapilanTanker] || '').trim(), location: String(row[colMap.dolumYapilanHavaLimani] || '').trim() };
                                } else if (recordTypeStr === 'Tanker Transfer') {
                                    const veren = String(row[colMap.yakitiVerenTanker] || '').trim();
                                    const alan = String(row[colMap.yakitiAlanTanker] || '').trim();
                                    return { ...baseRecord, recordType: 'tankerTransfer', locationType: "Tanker Transfer", personnelName: 'Tanker Transfer', receivingTankerPlate: alan, fillingTankerPlate: veren, location: `${veren} -> ${alan}` };
                                }
                                return null;
                            } catch(e) { console.error('Error parsing fuel record row:', row, e); return null; }
                        }).filter(Boolean);

                        if (newFuelRecords.length > 0) {
                            updates.fuelRecords = [...props.fuelRecords, ...newFuelRecords];
                            successMessages.push(`${newFuelRecords.length} yakıt kaydı`);
                        }
                    }
                });

                if (Object.keys(updates).length > 0) {
                    props.onBulkUpdate(updates);
                    props.showMessage(`${successMessages.join(', ')} başarıyla yüklendi.`, 'success');
                } else {
                    props.showMessage('Excel dosyasında geçerli veri içeren sayfa bulunamadı.', 'error');
                }
            } catch (error) {
                props.showMessage('Dosya ayrıştırılamadı. Lütfen dosyayı kontrol edin.', 'error');
                console.error("Bulk file parsing error:", error);
            }
        };
        reader.readAsArrayBuffer(file);
    };

    const DataEntryModule = () => {
        const subNav = [
            { id: 'bulkUpload', label: 'Toplu Veri Yükle'},
            { id: 'aircraft', label: 'Hava Aracı Verisi'},
            { id: 'airport', label: 'Hava Limanı Verisi'},
            { id: 'tanker', label: 'Tanker Verisi'},
            { id: 'personnel', label: 'Personel Verisi'},
        ];
        return React.createElement("div", { className: "space-y-4" },
            React.createElement("h2", { className: "text-2xl font-bold text-slate-700" }, "Veri Ekle Modülü"),
            React.createElement("div", { className: "flex flex-wrap gap-2 p-2 bg-black/10 rounded-lg" },
                subNav.map(item => React.createElement("button", {
                    key: item.id,
                    onClick: () => setActiveDataEntryView(item.id),
                    className: `flex-1 py-2 px-3 rounded-md text-sm font-semibold transition-all min-w-[120px] ${activeDataEntryView === item.id ? 'bg-ogm-green-600 text-white shadow' : 'bg-white/60 text-ogm-green-900 hover:bg-white/80'}`
                }, item.label))
            ),
            React.createElement("div", { className: "mt-4" },
                 activeDataEntryView === 'bulkUpload' && React.createElement("div", { className: "p-6 bg-black/5 rounded-lg border border-slate-200 space-y-4" },
                    React.createElement("h3", { className: "text-lg font-semibold text-slate-700" }, "Excel Dosyası Yükle"),
                     React.createElement("div", { className: "text-sm text-slate-600 space-y-2" },
                        React.createElement("p", null, "Lütfen içinde 'hava aracı verisi', 'tanker verisi', 'personel verisi', 'hava limanı verisi' ve 'yakıt kayıtları verisi' adında sayfalar bulunan tek bir Excel dosyası yükleyin."),
                        React.createElement("p", null, React.createElement("strong", null, "Önemli:"), " 'yakıt kayıtları verisi' sayfası aşağıdaki 14 sütunu içermelidir (sırası önemli değildir):"),
                        React.createElement("ul", { className: "list-disc list-inside text-xs pl-4 grid grid-cols-2 gap-x-4" },
                            ['Tarih', 'Kayıt Tipi', 'Makbuz Numarası', 'Yakıt Miktarı (lt)', 'Kuyruk Numarası', 'Personel Adı', 'Mesleği', 'Kart Numarası', 'İkmal Tipi', 'İkmal Konumu', 'Dolum Yapılan Tanker Plakası', 'Dolum Yapılan Hava Limanı', 'Yakıtı Alan Tanker Plakası', 'Yakıtı Veren Tanker Plakası'].map(col => React.createElement("li", { key: col }, col))
                        ),
                        React.createElement("p", { className: "mt-2" }, "Her kayıt tipi için sadece ilgili sütunları doldurunuz, diğerlerini boş bırakınız.")
                    ),
                    React.createElement("div", { className: "mt-4" }, React.createElement(FileUpload, { onFileUpload: handleBulkFileUpload }))
                 ),
                 activeDataEntryView === 'aircraft' && React.createElement(AircraftDataManagement, { aircraftData: props.aircraftData, onUpdate: props.updateAircraftData, showMessage: props.showMessage }),
                 activeDataEntryView === 'airport' && React.createElement(AirportDataManagement, { airportList: props.airportList, onUpdate: props.updateAirportList, showMessage: props.showMessage }),
                 activeDataEntryView === 'tanker' && React.createElement(TankerDataManagement, { tankerData: props.tankerData, onUpdate: props.updateTankerData, showMessage: props.showMessage }),
                 activeDataEntryView === 'personnel' && React.createElement(PersonnelDataManagement, { personnelList: props.personnelList, onUpdate: props.updatePersonnelList, showMessage: props.showMessage })
            )
        );
    };

    if (!props.currentUser) {
        return React.createElement(AdminLogin, { onLoginSuccess: props.setCurrentUser, showMessage: props.showMessage, adminCredentials: props.adminCredentials });
    }

    return (
        React.createElement("div", { className: "flex flex-col md:flex-row gap-6" },
            React.createElement("aside", { className: "w-full md:w-56 bg-ogm-green-700 shadow-lg p-4 rounded-lg flex flex-col" },
                React.createElement("nav", { className: "space-y-3 flex-grow" },
                     React.createElement(NavButton, { label: "Veri Ekle", onClick: () => setActiveModule('dataEntry'), isActive: activeModule === 'dataEntry' },
                         React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 mr-3", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2 }, React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" }))
                    ),
                    React.createElement(NavButton, { label: "Makbuz Yönetimi", onClick: () => setActiveModule('receipts'), isActive: activeModule === 'receipts' },
                         React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 mr-3", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2 }, React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" }))
                    ),
                    React.createElement(NavButton, { label: "Tanker Takip", onClick: () => setActiveModule('tankerTracking'), isActive: activeModule === 'tankerTracking' },
                         React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 mr-3", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2 }, React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" }), React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 11a3 3 0 11-6 0 3 3 0 016 0z" }))
                    ),
                    React.createElement(NavButton, { label: "Talep Onay", badge: props.approvalRequests.length + props.personnelApprovalRequests.length, onClick: () => setActiveModule('approval'), isActive: activeModule === 'approval' },
                        React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 mr-3", viewBox: "0 0 20 20", fill: "currentColor" }, React.createElement("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", clipRule: "evenodd" }))
                    ),
                     React.createElement(NavButton, { label: "Ayarlar", onClick: () => setActiveModule('settings'), isActive: activeModule === 'settings' },
                        React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 mr-3", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: 2 }, React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0 3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" }), React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15 12a3 3 0 11-6 0 3 3 0 016 0z" }))
                    )
                ),
                React.createElement(UserInfo, { user: props.currentUser })
            ),
            React.createElement("main", { className: "flex-1" },
                activeModule === 'dataEntry' && React.createElement(DataEntryModule, null),
                activeModule === 'receipts' && React.createElement(RecordManagement, { fuelRecords: props.fuelRecords, onUpdateFuelRecords: props.updateFuelRecords, aircraftData: props.aircraftData, tankerData: props.tankerData, airportList: props.airportList, showMessage: props.showMessage }),
                activeModule === 'tankerTracking' && React.createElement(TankerTakip, { tankerData: props.tankerData, fuelRecords: props.fuelRecords, showMessage: props.showMessage }),
                activeModule === 'approval' && React.createElement(ApprovalRequestsComponent, { approvalRequests: props.approvalRequests, personnelApprovalRequests: props.personnelApprovalRequests, onHandleEditApproval: props.handleEditApproval, onHandlePersonnelApproval: props.handlePersonnelApproval, showMessage: props.showMessage }),
                activeModule === 'settings' && React.createElement(UserManagement, { adminCredentials: props.adminCredentials, onAddUser: props.addAdminUser, onDeleteUser: props.deleteAdminUser, showMessage: props.showMessage })
            )
        )
    );
};

// From App.tsx
const normalizeSheetRecord = (rec, allPersonnel) => {
    const recordType = rec['Kayıt Tipi'];
    if (!recordType) return null;

    const normalized = {
        id: `sheet-${rec['Makbuz Numarası'] || ''}-${Math.random()}`,
        kayitNumarasi: rec['Kayıt No'] || generateRecordNumber(), // Fallback for older data
        date: parseSheetDate(rec['Tarih']),
        receiptNumber: rec['Makbuz Numarası'],
        fuelAmount: parseFloat(String(rec['Yakıt Miktarı (lt)'] || '0').replace(',', '.')) || 0,
    };
    
    if (!normalized.date) return null; // Skip records with unparseable dates

    if (recordType === 'Hava Aracı İkmal') {
        normalized.recordType = 'personnel';
        normalized.tailNumber = rec['Kuyruk Numarası'];
        normalized.personnelName = rec['Personel Adı'];
        normalized.jobTitle = rec['Mesleği'];
        normalized.cardNumber = rec['Kart Numarası'];
        normalized.locationType = rec['İkmal Tipi'];
        normalized.location = rec['İkmal Konumu'];
    } else if (recordType === 'Tanker Dolum') {
        normalized.recordType = 'tankerDolum';
        normalized.personnelName = 'Tanker Dolum';
        normalized.locationType = 'Tanker Dolum';
        normalized.tankerPlate = rec['Dolum Yapılan Tanker Plakası'];
        normalized.location = rec['Dolum Yapılan Hava Limanı'];
    } else if (recordType === 'Tanker Transfer') {
        normalized.recordType = 'tankerTransfer';
        normalized.personnelName = 'Tanker Transfer';
        normalized.locationType = 'Tanker Transfer';
        normalized.receivingTankerPlate = rec['Yakıtı Alan Tanker Plakası'];
        normalized.fillingTankerPlate = rec['Yakıtı Veren Tanker Plakası'];
        normalized.location = `${rec['Yakıtı Veren Tanker Plakası'] || ''} -> ${rec['Yakıtı Alan Tanker Plakası'] || ''}`;
    } else {
        return null;
    }

    if (normalized.personnelName && allPersonnel) {
        const p = allPersonnel.find(person => person.name === normalized.personnelName);
        if(p) normalized.personnelId = p.id;
    }
    
    return normalized;
};

const deNormalizeRecord = (record) => {
    const denormalized = {
        'Tarih': record.date || '',
        'Kayıt Tipi': '',
        'Makbuz Numarası': record.receiptNumber || '',
        'Yakıt Miktarı (lt)': record.fuelAmount || 0,
        'Kuyruk Numarası': '',
        'Personel Adı': '',
        'Mesleği': '',
        'Kart Numarası': '',
        'İkmal Tipi': '',
        'İkmal Konumu': '',
        'Dolum Yapılan Tanker Plakası': '',
        'Dolum Yapılan Hava Limanı': '',
        'Yakıtı Alan Tanker Plakası': '',
        'Yakıtı Veren Tanker Plakası': '',
    };
    
    denormalized['Kayıt No'] = record.kayitNumarasi || '';

    if (record.recordType === 'personnel') {
        denormalized['Kayıt Tipi'] = 'Hava Aracı İkmal';
        denormalized['Kuyruk Numarası'] = record.tailNumber || '';
        denormalized['Personel Adı'] = record.personnelName || '';
        denormalized['Mesleği'] = record.jobTitle || '';
        denormalized['Kart Numarası'] = record.cardNumber || '';
        denormalized['İkmal Tipi'] = record.locationType || '';
        denormalized['İkmal Konumu'] = record.location || '';
    } else if (record.recordType === 'tankerDolum') {
        denormalized['Kayıt Tipi'] = 'Tanker Dolum';
        denormalized['Dolum Yapılan Tanker Plakası'] = record.tankerPlate || '';
        denormalized['Dolum Yapılan Hava Limanı'] = record.location || '';
    } else if (record.recordType === 'tankerTransfer') {
        denormalized['Kayıt Tipi'] = 'Tanker Transfer';
        denormalized['Yakıtı Alan Tanker Plakası'] = record.receivingTankerPlate || '';
        denormalized['Yakıtı Veren Tanker Plakası'] = record.fillingTankerPlate || '';
    }

    return denormalized;
};

const App = () => {
    const [activeView, setActiveView] = useState(VIEW_FUEL_ENTRY);
    const [message, setMessage] = useState(null);
    const [currentUser, setCurrentUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isProcessing, setIsProcessing] = useState(false);
    const [criticalError, setCriticalError] = useState(null);

    const [fuelRecords, setFuelRecords] = useState([]);
    const [aircraftData, setAircraftData] = useState([]);
    const [tankerData, setTankerData] = useState([]);
    const [approvalRequests, setApprovalRequests] = useState([]);
    const [personnelApprovalRequests, setPersonnelApprovalRequests] = useState([]);
    const [personnelList, setPersonnelList] = useState(INITIAL_PERSONNEL_LIST);
    const [adminCredentials, setAdminCredentials] = useState([{ id: 'user-0', name: 'OGM Admin', username: 'ogm', password: '1839' }]);
    const [airportList, setAirportList] = useState(INITIAL_AIRPORT_LIST);

    const showMessage = (text, type) => {
        setMessage({ text, type });
        setTimeout(() => setMessage(null), 5000);
    };

    const postData = async (action, payload) => {
        setIsProcessing(true);
        try {
            const requestBody = { action, payload };
            const res = await fetch(SCRIPT_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'text/plain;charset=utf-8',
                },
                body: JSON.stringify(requestBody)
            });

            const responseText = await res.text();

            let result;
            try {
                result = JSON.parse(responseText);
            } catch (jsonError) {
                console.error('Failed to parse JSON response:', responseText);
                throw new Error(`Sunucudan geçersiz veya boş bir yanıt alındı. HTTP Durumu: ${res.status}`);
            }

            if (result.status !== 'success' && result.success !== true) {
                 if (result.success === false && (action.includes('ApproveRequest') || action.includes('RejectRequest'))) {
                     showMessage(result.message || 'İşlem tamamlanamadı ama veri yenilendi.', 'error');
                     return result;
                 }
                 throw new Error(result.message || 'Komut dosyası tarafında bilinmeyen bir hata oluştu.');
            }
            return result;

        } catch (error) {
            console.error(`"postData" hatası (eylem: "${action}"):`, error);
            if (error.message && (error.message.includes('SPREADSHEET_ID') || error.message.includes('E-Tablo Açılamadı'))) {
                 // Do not show a toast for this critical error; the main useEffect will handle it.
            } else if (error.message.includes('Failed to fetch')) {
                 showMessage('Ağ Hatası: Sunucuya ulaşılamadı. Lütfen internet bağlantınızı kontrol edin.', 'error');
            } else {
                showMessage(`İşlem Başarısız: ${error.message}`, 'error');
            }
            throw error;
        } finally {
            setIsProcessing(false);
        }
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                setIsLoading(true);
                setCriticalError(null);
                const [panelDataResult, approvalRequestsResult, personnelApprovalRequestsResult] = await Promise.all([
                    postData('onGetAdminPanelData', null),
                    postData('onGetApprovalRequests', null),
                    postData('onGetPersonnelApprovalRequests', null)
                ]);

                const panelData = panelDataResult.data;
                const personnelData = panelData.personnel && panelData.personnel.length > 0 ? panelData.personnel : INITIAL_PERSONNEL_LIST;

                const normalizedFuelRecords = (panelData.fuelRecords || []).map((rec) => normalizeSheetRecord(rec, personnelData)).filter(Boolean);

                setFuelRecords(normalizedFuelRecords);
                setAircraftData(panelData.aircrafts || []);
                setTankerData(panelData.tankers || []);
                setPersonnelList(personnelData);
                setAdminCredentials(panelData.admins && panelData.admins.length > 0 ? panelData.admins : [{ id: 'user-0', name: 'OGM Admin', username: 'ogm', password: '1839' }]);
                
                const typedAirports = (panelData.airports || [])
                    .filter((a) => a && typeof a.id === 'string' && typeof a.name === 'string' && (a.type === 'Sivil' || a.type === 'Askeri'));
                setAirportList(typedAirports.length > 0 ? typedAirports : INITIAL_AIRPORT_LIST);

                setApprovalRequests(approvalRequestsResult.data || []);
                setPersonnelApprovalRequests(personnelApprovalRequestsResult.data || []);

            } catch (error) {
                console.error("Failed to fetch initial data:", error);
                if (error.message && (error.message.includes('SPREADSHEET_ID') || error.message.includes('E-Tablo Açılamadı'))) {
                    setCriticalError(
                        "Uygulama Başlatılamadı: Arka Uç Yapılandırma Hatası\n\n" +
                        "Google E-Tablosu'na bağlanılamıyor. Lütfen aşağıdaki adımları kontrol edin:\n\n" +
                        "1. Google Apps Script projenizdeki `Code.js` dosyasını açın.\n\n" +
                        "2. `SPREADSHEET_ID` değişkeninin doğru E-Tablo kimliği ile ayarlandığından emin olun. (Kimlik, E-Tablo URL'sinde `/d/` ve `/edit` arasındaki kısımdır.)\n\n" +
                        "3. Komut dosyasını dağıtan Google hesabının, ilgili E-Tablo dosyası üzerinde 'Düzenleyici' (Editor) yetkisine sahip olduğundan emin olun.\n\n" +
                        "Bu değişiklikleri yaptıktan sonra, Apps Script projenizi yeniden dağıtmayı unutmayın (Deploy > Manage deployments > Düzenle Simgesi > Version: New version)."
                    );
                } else {
                     setCriticalError(
                        "Uygulama Başlatılamadı: Arka Uç Sunucusuna Bağlanılamadı\n\n" +
                        "Genel bir ağ hatası oluştu. Lütfen aşağıdaki adımları kontrol edin:\n\n" +
                        "1. İnternet bağlantınızın çalıştığından emin olun.\n\n" +
                        "2. Google Apps Script projenizin doğru bir şekilde dağıtıldığından (deployed) emin olun. (Deploy > Manage deployments > Web app URL'si aktif olmalı).\n\n" +
                        "3. Dağıtım ayarlarında 'Execute as' seçeneğinin 'Me' (siz) ve 'Who has access' seçeneğinin 'Anyone' (herkes) olarak ayarlandığını doğrulayın. Bu, uygulamanın komut dosyasına erişim izni olmasını sağlar.\n\n" +
                        "4. `constants.ts` dosyasındaki `SCRIPT_URL`'nin, dağıtımınızın URL'si ile eşleştiğini kontrol edin."
                    );
                }
            } finally {
                setIsLoading(false);
            }
        };
        fetchData();
    }, []);

    const handleAddRecord = async (record) => {
        const denormalizedRecord = deNormalizeRecord(record);
        await postData('onAddRecord', denormalizedRecord);
        setFuelRecords(prev => [...prev, record]);
    };
    
    const handleAddPersonnelRequest = async (request) => {
        const requestWithTimestamp = {
            id: `personnel-req-${Date.now()}`,
            name: request.name,
            job: request.job,
            timestamp: new Date().toISOString()
        };
        await postData('onAddPersonnelRequest', requestWithTimestamp);
        setPersonnelApprovalRequests(prev => [...prev, requestWithTimestamp]);
    }

    const handleAddApprovalRequest = async (request) => {
        const payload = {
            ...request,
            originalRecord: JSON.stringify(request.originalRecord),
            requestedChanges: JSON.stringify(request.requestedChanges),
        };
        await postData('onAddApprovalRequest', payload);
        setApprovalRequests(prev => [...prev, request]);
    };
    
    const handleBulkUpdate = async (updates) => {
        const denormalizedUpdates = {};
        if (updates.aircraftData) denormalizedUpdates.aircraftData = updates.aircraftData;
        if (updates.tankerData) denormalizedUpdates.tankerData = updates.tankerData;
        if (updates.personnelList) denormalizedUpdates.personnelList = updates.personnelList;
        if (updates.airportList) denormalizedUpdates.airportList = updates.airportList;
        if (updates.admins) denormalizedUpdates.admins = updates.admins;
        if (updates.fuelRecords) {
            denormalizedUpdates.fuelRecords = updates.fuelRecords.map(deNormalizeRecord);
        }

        await postData('onBulkUpdate', denormalizedUpdates);
        
        if (updates.aircraftData) setAircraftData(updates.aircraftData);
        if (updates.tankerData) setTankerData(updates.tankerData);
        if (updates.personnelList) setPersonnelList(updates.personnelList);
        if (updates.airportList) setAirportList(updates.airportList);
        if (updates.admins) setAdminCredentials(updates.admins);
        if (updates.fuelRecords) setFuelRecords(updates.fuelRecords);
    };

    const handleEditApproval = async (request, approved) => {
        const updatedRecord = { ...request.originalRecord, ...request.requestedChanges };
        const payload = {
            requestId: request.id,
            originalRecord: deNormalizeRecord(request.originalRecord),
            updatedRecord: deNormalizeRecord(updatedRecord)
        };
        const action = approved ? 'onApproveRequest' : 'onRejectRequest';

        const result = await postData(action, payload);
        
        setFuelRecords(result.data.fuelRecords.map((r) => normalizeSheetRecord(r, personnelList)).filter(Boolean));
        setApprovalRequests(result.data.approvalRequests);
        
        showMessage(`Talep ${approved ? 'onaylandı' : 'reddedildi'}.`, 'success');
    };

    const handlePersonnelApproval = async (requestId, approved) => {
        const payload = { requestId };
        const action = approved ? 'onApprovePersonnelRequest' : 'onRejectPersonnelRequest';
        const result = await postData(action, payload);
        setPersonnelList(result.data.personnelList);
        setPersonnelApprovalRequests(result.data.personnelApprovalRequests);
        showMessage(`Personel talebi ${approved ? 'onaylandı' : 'reddedildi'}.`, 'success');
    };

    const updateAircraftData = (data) => handleBulkUpdate({ aircraftData: data });
    const updateTankerData = (data) => handleBulkUpdate({ tankerData: data });
    const updatePersonnelList = (data) => handleBulkUpdate({ personnelList: data });
    const updateAirportList = (data) => handleBulkUpdate({ airportList: data });
    const addAdminUser = (user) => handleBulkUpdate({ admins: [...adminCredentials, user] });
    const deleteAdminUser = (userId) => handleBulkUpdate({ admins: adminCredentials.filter(u => u.id !== userId) });
    const updateFuelRecords = (data) => handleBulkUpdate({ fuelRecords: data });
    
    if (isLoading) {
        return (
            React.createElement("div", { className: "fixed inset-0 bg-white flex flex-col justify-center items-center z-50 text-center animate-fadeIn" },
                React.createElement("img", {
                    src: "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExMWx6eG0zcjIxY2xqczQ3NDdzdWg1NnBuZjJsY3Z0aG53djI3bmtyciZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/eRlCNIpfGdPdub57JI/giphy.gif",
                    alt: "OGM Logo",
                    className: "h-48 w-48 rounded-full object-cover mb-8"
                }),
                React.createElement("div", { className: "text-center" },
                     React.createElement("p", { className: "text-2xl text-ogm-green-800 font-bold" }, "Veriler Yükleniyor..."),
                     React.createElement("p", { className: "text-lg text-slate-600 mt-2" }, "Lütfen bekleyiniz.")
                )
            )
        );
    }

    if (criticalError) {
        return React.createElement(CriticalErrorDisplay, { message: criticalError });
    }

    return (
        React.createElement("div", { className: "container mx-auto p-2 sm:p-6 md:p-8 lg:p-12" },
            React.createElement("div", { className: "bg-white/70 backdrop-blur-md rounded-2xl shadow-xl p-6 sm:p-8 md:p-10" },
                React.createElement(Header, null),
                React.createElement(LoadingSpinner, { isVisible: isProcessing }),
                message && React.createElement(MessageBox, { text: message.text, type: message.type }),
                React.createElement(Tabs, { activeView: activeView, setActiveView: setActiveView }),
                React.createElement("main", { className: "mt-8" },
                    activeView === VIEW_FUEL_ENTRY &&
                        React.createElement(FuelEntryForm, {
                            personnelList: personnelList,
                            aircraftData: aircraftData,
                            tankerData: tankerData,
                            airportList: airportList,
                            onAddRecord: handleAddRecord,
                            onAddPersonnelRequest: handleAddPersonnelRequest,
                            showMessage: showMessage
                        }),
                    activeView === VIEW_SEARCH_RECORDS &&
                        React.createElement(SearchRecords, {
                            fuelRecords: fuelRecords,
                            personnelList: personnelList,
                            aircraftData: aircraftData,
                            tankerData: tankerData,
                            airportList: airportList,
                            onAddApprovalRequest: handleAddApprovalRequest,
                            showMessage: showMessage
                        }),
                    activeView === VIEW_ADMIN_PANEL &&
                        React.createElement(AdminPanel, {
                            currentUser: currentUser,
                            setCurrentUser: setCurrentUser,
                            fuelRecords: fuelRecords,
                            aircraftData: aircraftData,
                            tankerData: tankerData,
                            personnelList: personnelList,
                            approvalRequests: approvalRequests,
                            personnelApprovalRequests: personnelApprovalRequests,
                            adminCredentials: adminCredentials,
                            airportList: airportList,
                            showMessage: showMessage,
                            updateAircraftData: updateAircraftData,
                            updateTankerData: updateTankerData,
                            updatePersonnelList: updatePersonnelList,
                            updateAirportList: updateAirportList,
                            addAdminUser: addAdminUser,
                            deleteAdminUser: deleteAdminUser,
                            updateFuelRecords: updateFuelRecords,
                            handleEditApproval: handleEditApproval,
                            handlePersonnelApproval: handlePersonnelApproval,
                            onBulkUpdate: handleBulkUpdate
                        })
                )
            )
        )
    );
};

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(React.createElement(App));

    </script>
  </body>
</html>
