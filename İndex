<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hava Aracı Faaliyet Takip Menü</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        .menu-container {
            width: 350px;
            background-color: #ffffff;
            border: 1px solid #ddd;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .header-container {
            padding: 20px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }
        .header-container h2 {
            margin: 0;
            color: #333;
        }
        .menu-list {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .menu-item {
            cursor: pointer;
            border-bottom: 1px solid #ddd;
            user-select: none;
        }
        .menu-title {
            padding: 12px 20px;
            font-size: 16px;
            font-weight: bold;
            color: #555;
            display: block;
            position: relative;
        }
        .menu-title::after {
            content: '+';
            font-size: 20px;
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            transition: transform 0.3s ease;
        }
        .menu-title.active::after {
            content: '-';
            transform: translateY(-50%) rotate(180deg);
        }
        .nested-menu {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
            background-color: #fafafa;
        }
        .nested-menu.open {
            max-height: 500px;
        }
        .nested-menu-item {
            padding: 10px 30px;
            font-size: 14px;
            color: #777;
            transition: background-color 0.2s;
        }
        .nested-menu-item:hover {
            background-color: #f0f0f0;
        }
        .update-screen {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background-color: #fff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 600px;
            position: relative;
            animation: fadeIn 0.3s ease-out;
            max-height: 90vh;
            overflow-y: auto;
        }
        .close-button {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 24px;
            cursor: pointer;
            color: #aaa;
        }
        .close-button:hover {
            color: #555;
        }
        .hidden {
            display: none;
        }
        .form-row {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .form-row label {
            width: 150px;
            min-width: 150px;
            font-weight: bold;
            color: #555;
        }
        .form-row input[type="text"], .form-row select, .form-row input[type="date"] {
            flex: 1;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }
        .form-row input:focus, .form-row select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0,123,255,0.25);
        }
        .form-row input.filled {
            border-color: #28a745;
        }
        .form-row label.filled {
            color: #28a745;
        }
        .button-group {
            text-align: right;
            margin-top: 20px;
        }
        .button-group button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        .button-group #updateButton {
            background-color: #007bff;
            color: #fff;
        }
        .button-group #updateButton:hover {
            background-color: #0056b3;
        }
        .info-box {
            background-color: #e9ecef;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 15px;
            text-align: center;
        }
        .info-box p {
            margin: 5px 0;
            font-size: 15px;
            color: #495057;
        }
        .total-box {
            font-weight: bold;
            font-size: 1.1em;
            color: #007bff;
        }
        .total-box.green {
            color: #28a745;
        }
        .total-hours-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f8f9fa;
            padding: 10px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        .total-hours-container .label {
            font-weight: bold;
            color: #495057;
        }
        .total-hours-container .value {
            font-weight: bold;
            color: #007bff;
        }
        #save-button {
            background-color: #28a745;
            color: #fff;
        }
        #save-button:hover {
            background-color: #218838;
        }
        #save-button:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .success-modal-content {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            max-width: 400px;
            position: relative;
        }
        .success-modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            justify-content: center;
            align-items: center;
        }
        .success-message {
            white-space: pre-wrap;
            text-align: left;
            font-size: 14px;
            margin-bottom: 20px;
            line-height: 1.5;
        }
        .success-modal-content button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s;
            margin: 0 5px;
        }
        .success-modal-content #ok-button {
            background-color: #007bff;
            color: white;
        }
        .success-modal-content #download-pdf-button {
            background-color: #dc3545;
            color: white;
        }
        #non-operational-reason {
            margin-left: 150px;
            display: block;
        }
        .checkbox-row {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }
        .checkbox-row label {
            width: auto;
            margin-left: 10px;
        }
        .fieldset-container {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            margin-top: 15px;
        }
        .fieldset-container fieldset {
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
            flex-grow: 1;
            transition: opacity 0.3s ease-in-out;
        }
        .fieldset-container.faded-fieldset {
            opacity: 0.5;
        }
    </style>
</head>
<body>

    <div class="menu-container">
        <div class="header-container">
            <h2>Hava Aracı Faaliyet Takip Menüsü</h2>
        </div>
        <ul class="menu-list">
            <li class="menu-item">
                <span class="menu-title">Hava Aracı Takip</span>
                <ul class="nested-menu">
                    <li class="nested-menu-item" id="update-aircraft-hours">Faydalı Saat Defterini Doldur</li>
                    <li class="nested-menu-item">Uçuş Kaydı Görüntüle</li>
                    <li class="nested-menu-item">Uçuş Durumu Görüntüle</li>
                    <li class="nested-menu-item">Günlük Kontroller</li>
                </ul>
            </li>
            <li class="menu-item">
                <span class="menu-title">Teknik Defter</span>
                <ul class="nested-menu">
                    <li class="nested-menu-item">Teknik Defteri Görüntüle</li>
                    <li class="nested-menu-item">Teknik Defter Girişi Yap</li>
                </ul>
            </li>
        </ul>
    </div>

    <div id="updateScreen" class="update-screen">
        <div id="first-modal-content" class="modal-content">
            <span class="close-button" id="closeButton1">&times;</span>
            <h2>Faydalı Saat Defteri</h2>
            <div class="form-row">
                <label for="aircraftModelSelect">Hava Aracı Modeli:</label>
                <select id="aircraftModelSelect">
                    <option value="">Seçiniz</option>
                    <option value="AT-802">AT-802</option>
                    <option value="T-70">T-70</option>
                    <option value="BELL-429">BELL-429</option>
                </select>
            </div>
            <div class="form-row">
                <label for="connectedSelect">Kuyruk No:</label>
                <select id="connectedSelect">
                    <option value="">Model seçiniz</option>
                </select>
            </div>
            <div class="button-group">
                <button id="updateButton">Devam Et</button>
            </div>
        </div>

        <div id="second-modal-content" class="modal-content hidden">
            <span class="close-button" id="closeButton2">&times;</span>
            <h2>Faydalı Saat Defteri Girişi</h2>
            <div class="info-box">
                <p id="selected-model"></p>
                <p id="selected-tailno"></p>
            </div>

            <div class="form-row">
                <label for="date-input">Tarih:</label>
                <input type="date" id="date-input">
            </div>
            <div class="form-row">
                <label for="mission-location">Görev Yeri:</label>
                <select id="mission-location">
                    <option value="">Seçiniz</option>
                    <option value="Merkez">Merkez</option>
                    <option value="Meskun Mahal">Meskun Mahal</option>
                    <option value="Müfreze">Müfreze</option>
                </select>
            </div>

            <div class="form-row">
                <label for="aircraft-status">Hava Aracı Durumu:</label>
                <select id="aircraft-status">
                    <option value="">Seçiniz</option>
                    <option value="Faal">Faal</option>
                    <option value="Gayrıfaal">Gayrıfaal</option>
                </select>
            </div>

            <div id="non-operational-reason" class="hidden">
                <label for="non-operational-status">Gayrıfaal Durum Nedeni:</label>
                <select id="non-operational-status">
                    <option value="">Seçiniz</option>
                    <option value="Periyodik Bakım">Periyodik Bakım</option>
                    <option value="Arıza">Arıza</option>
                    <option value="Mürettebat Eksikliği">Mürettebat Eksikliği</option>
                    <option value="Personel Eksikliği">Personel Eksikliği</option>
                </select>
            </div>

            <div class="form-row">
                <label for="personnel-info">Defteri Dolduran Personel:</label>
                <select id="personnel-info">
                    <option value="">Seçiniz</option>
                    <option value="Bşçvş Niyazi BALIKÇI">Bşçvş Niyazi BALIKÇI</option>
                    <option value="Astsb Alper YILMAZ">Astsb Alper YILMAZ</option>
                    <option value="Uçk. Tek. Yüzbaşı Enis ÇEVİK">Uçk. Tek. Yüzbaşı Enis ÇEVİK</option>
                    <option value="Uçk. Tek. Üsteğmen Ömer EREN">Uçk. Tek. Üsteğmen Ömer EREN</option>
                    <option value="Uçk. Tek. Üsteğmen Sercan AY">Uçk. Tek. Üsteğmen Sercan AY</option>
                </select>
            </div>

            <div class="checkbox-row">
                <input type="checkbox" id="engine-start-only-checkbox">
                <label for="engine-start-only-checkbox">Sadece Motor Çalıştırma</label>
            </div>

            <div class="checkbox-row">
                <input type="checkbox" id="frds-control-only-checkbox">
                <label for="frds-control-only-checkbox">Sadece FRDS Kontrolü</label>
            </div>

            <div class="form-row hidden">
                <label>Aktarılan Uçuş Saati:</label>
                <span id="transferredHours">00:00</span>
            </div>
            <div class="form-row">
                <label for="daily-hours-input">Günlük Uçuş Saati:</label>
                <input type="text" id="daily-hours-input" placeholder="HH:MM">
                <div class="total-hours-container" style="margin-left: 10px;">
                    <span class="label">Toplam:</span>
                    <span class="value total-box" id="totalHours">00:00</span>
                </div>
            </div>

            <div class="fieldset-container">
                <fieldset>
                    <legend>Motor</legend>
                    <div class="form-row">
                        <label>Aktarılan Saat:</label>
                        <span id="transferredEngineHours">00:00</span>
                    </div>
                    <div class="form-row">
                        <label for="daily-engine-hours-input">Günlük Saat:</label>
                        <input type="text" id="daily-engine-hours-input" placeholder="HH:MM">
                        <div class="total-hours-container" style="margin-left: 10px;">
                            <span class="label">Toplam:</span>
                            <span class="value total-box" id="totalEngineHours">00:00</span>
                        </div>
                    </div>
                    <div class="form-row">
                        <label>Aktarılan Sayı:</label>
                        <span id="transferredEngineCycles">0</span>
                    </div>
                    <div class="form-row">
                        <label for="daily-engine-cycles-input">Günlük Sayı:</label>
                        <input type="text" id="daily-engine-cycles-input" placeholder="Sayı">
                        <div class="total-hours-container" style="margin-left: 10px;">
                            <span class="label">Toplam:</span>
                            <span class="value total-box" id="totalEngineCycles">0</span>
                        </div>
                    </div>
                    <div class="form-row">
                        <label for="engine-start-date">Son Çalıştırma Tarihi:</label>
                        <input type="date" id="engine-start-date">
                    </div>
                </fieldset>

                <fieldset>
                    <legend>Pervane</legend>
                    <div class="form-row">
                        <label>Aktarılan Saat:</label>
                        <span id="transferredPropellerHours">00:00</span>
                    </div>
                    <div class="form-row">
                        <label for="daily-propeller-hours-input">Günlük Saat:</label>
                        <input type="text" id="daily-propeller-hours-input" placeholder="HH:MM">
                        <div class="total-hours-container" style="margin-left: 10px;">
                            <span class="label">Toplam:</span>
                            <span class="value total-box" id="totalPropellerHours">00:00</span>
                        </div>
                    </div>
                    <div class="form-row">
                        <label>Aktarılan Sayı:</label>
                        <span id="transferredLandingCount">0</span>
                    </div>
                    <div class="form-row">
                        <label for="daily-landing-count-input">Günlük Sayı:</label>
                        <input type="text" id="daily-landing-count-input" placeholder="Sayı">
                        <div class="total-hours-container" style="margin-left: 10px;">
                            <span class="label">Toplam:</span>
                            <span class="value total-box" id="totalLandingCount">0</span>
                        </div>
                    </div>
                    <div class="form-row">
                        <label>FRDS Kontrol Tarihi:</label>
                        <input type="date" id="frds-control-date">
                    </div>
                </fieldset>
            </div>

            <div class="form-row">
                <label>Aktarılan Uçuş Sayısı:</label>
                <span id="transferredFlightCount">0</span>
            </div>
            <div class="form-row">
                <label for="daily-flight-count-input">Günlük Uçuş Sayısı:</label>
                <input type="text" id="daily-flight-count-input" placeholder="Sayı">
                <div class="total-hours-container" style="margin-left: 10px;">
                    <span class="label">Toplam:</span>
                    <span class="value total-box" id="totalFlightCount">0</span>
                </div>
            </div>

            <div id="pdf-content-area" style="display: none;">
                </div>

            <input type="hidden" id="rowId" value="">

            <div class="button-group">
                <button id="save-button" disabled>Kaydet</button>
            </div>
        </div>
    </div>

    <div id="success-modal" class="success-modal">
        <div class="success-modal-content">
            <h3>Kayıt Başarıyla Tamamlandı!</h3>
            <pre id="success-message" class="success-message"></pre>
            <button id="ok-button">Tamam</button>
            <button id="download-pdf-button">PDF İndir</button>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const menuTitles = document.querySelectorAll('.menu-title');
            const updateScreen = document.getElementById('updateScreen');
            const updateAircraftHoursMenuItem = document.getElementById('update-aircraft-hours');
            const closeButton1 = document.getElementById('closeButton1');
            const closeButton2 = document.getElementById('closeButton2');
            const aircraftModelSelect = document.getElementById('aircraftModelSelect');
            const connectedSelect = document.getElementById('connectedSelect');
            const updateButton = document.getElementById('updateButton');
            const firstModalContent = document.getElementById('first-modal-content');
            const secondModalContent = document.getElementById('second-modal-content');
            const saveButton = document.getElementById('save-button');

            const successModal = document.getElementById('success-modal');
            const successMessage = document.getElementById('success-message');
            const okButton = document.getElementById('ok-button');
            const downloadPdfButton = document.getElementById('download-pdf-button');
            const pdfContentArea = document.getElementById('pdf-content-area');

            const aircraftStatusSelect = document.getElementById('aircraft-status');
            const nonOperationalReasonDiv = document.getElementById('non-operational-reason');
            const nonOperationalStatusSelect = document.getElementById('non-operational-status');

            const personnelInfoSelect = document.getElementById('personnel-info');

            const dailyHoursInput = document.getElementById('daily-hours-input');
            const dailyEngineHoursInput = document.getElementById('daily-engine-hours-input');
            const dailyPropellerHoursInput = document.getElementById('daily-propeller-hours-input');
            const dailyFlightCountInput = document.getElementById('daily-flight-count-input');
            const dailyEngineCyclesInput = document.getElementById('daily-engine-cycles-input');
            const dailyLandingCountInput = document.getElementById('daily-landing-count-input');
            const dateInput = document.getElementById('date-input');
            const engineStartDateInput = document.getElementById('engine-start-date');
            const frdsControlDateInput = document.getElementById('frds-control-date');
            const missionLocationSelect = document.getElementById('mission-location');

            const engineStartOnlyCheckbox = document.getElementById('engine-start-only-checkbox');
            const frdsControlOnlyCheckbox = document.getElementById('frds-control-only-checkbox');

            const fieldsets = document.querySelectorAll('.fieldset-container fieldset');

            const totalBoxes = [
                document.getElementById('totalHours'),
                document.getElementById('totalEngineHours'),
                document.getElementById('totalPropellerHours'),
                document.getElementById('totalFlightCount'),
                document.getElementById('totalEngineCycles'),
                document.getElementById('totalLandingCount')
            ];

            const dailyInputs = [
                dailyHoursInput, dailyEngineHoursInput, dailyPropellerHoursInput,
                dailyFlightCountInput, dailyEngineCyclesInput, dailyLandingCountInput
            ];

            const rowIdInput = document.getElementById('rowId');

            const aircraftData = {
                'AT-802': ['OR-2021', 'OR-2022', 'OR-2023', 'OR-2024', 'OR-2025', 'OR-2026', 'OR-2027', 'OR-2028', 'OR-2029', 'OR-2036', 'OR-2038'],
                'T-70': ['OR-1019', 'OR-1018', 'OR-1020'],
                'BELL-429': ['OR-3131', 'OR-3126', 'OR-3133']
            };

            menuTitles.forEach(title => {
                title.addEventListener('click', () => {
                    const nestedMenu = title.nextElementSibling;
                    if (nestedMenu && nestedMenu.classList.contains('nested-menu')) {
                        const isOpen = nestedMenu.classList.toggle('open');
                        title.classList.toggle('active', isOpen);
                    }
                });
            });

            updateAircraftHoursMenuItem.addEventListener('click', () => {
                updateScreen.style.display = 'flex';
                firstModalContent.classList.remove('hidden');
                secondModalContent.classList.add('hidden');
            });

            closeButton1.addEventListener('click', () => {
                updateScreen.style.display = 'none';
            });

            closeButton2.addEventListener('click', () => {
                updateScreen.style.display = 'none';
            });

            aircraftModelSelect.addEventListener('change', (event) => {
                const selectedModel = event.target.value;
                connectedSelect.innerHTML = '';
                if (selectedModel in aircraftData) {
                    aircraftData[selectedModel].forEach(tailNumber => {
                        const option = document.createElement('option');
                        option.value = tailNumber;
                        option.textContent = tailNumber;
                        connectedSelect.appendChild(option);
                    });
                } else {
                    const defaultOption = document.createElement('option');
                    defaultOption.value = '';
                    defaultOption.textContent = 'Model seçiniz';
                    connectedSelect.appendChild(defaultOption);
                }
            });

            updateButton.addEventListener('click', () => {
                const selectedModel = aircraftModelSelect.value;
                const selectedTailNo = connectedSelect.value;

                if (!selectedModel || !selectedTailNo) {
                    alert('Lütfen bir hava aracı modeli ve kuyruk numarası seçiniz.');
                    return;
                }

                document.getElementById('selected-model').textContent = `Seçilen Hava Aracı Modeli: ${selectedModel}`;
                document.getElementById('selected-tailno').textContent = `Seçilen Kuyruk Numarası: ${selectedTailNo}`;

                dateInput.value = '';
                engineStartDateInput.value = '';
                frdsControlDateInput.value = '';
                missionLocationSelect.value = '';
                aircraftStatusSelect.value = '';
                nonOperationalReasonDiv.classList.add('hidden');
                nonOperationalStatusSelect.value = '';
                personnelInfoSelect.value = '';

                dailyInputs.forEach(input => {
                    input.value = '';
                    input.classList.remove('filled');
                    const label = document.querySelector(`label[for="${input.id}"]`);
                    if (label) label.classList.remove('filled');
                });

                rowIdInput.value = '';
                engineStartOnlyCheckbox.checked = false;
                frdsControlOnlyCheckbox.checked = false;
                fieldsets.forEach(fieldset => fieldset.classList.remove('faded-fieldset'));
                dailyInputs.forEach(input => input.disabled = false);

                const today = new Date().toISOString().slice(0, 10);
                dateInput.value = today;
                engineStartDateInput.value = today;
                frdsControlDateInput.value = today;

                updateTotalBoxColors();

                calculateAndUpdateTotals();
                checkFormValidity();

                firstModalContent.classList.add('hidden');
                secondModalContent.classList.remove('hidden');
            });

            aircraftStatusSelect.addEventListener('change', (event) => {
                if (event.target.value === 'Gayrıfaal') {
                    nonOperationalReasonDiv.classList.remove('hidden');
                } else {
                    nonOperationalReasonDiv.classList.add('hidden');
                    nonOperationalStatusSelect.value = '';
                }
                checkFormValidity();
            });

            function checkFormValidity() {
                let isFormValid = true;

                const requiredFields = [
                    dateInput, engineStartDateInput, frdsControlDateInput, missionLocationSelect, aircraftStatusSelect, personnelInfoSelect
                ];

                if (!engineStartOnlyCheckbox.checked && !frdsControlOnlyCheckbox.checked) {
                     dailyInputs.forEach(field => {
                        if (field.value.trim() === '') {
                            isFormValid = false;
                        }
                    });
                }

                requiredFields.forEach(field => {
                    if (field.value.trim() === '') {
                        isFormValid = false;
                    }
                });

                if (aircraftStatusSelect.value === 'Gayrıfaal' && nonOperationalStatusSelect.value.trim() === '') {
                    isFormValid = false;
                }

                saveButton.disabled = !isFormValid;
            }

            function timeToMinutes(timeStr) {
                if (!timeStr) return 0;
                const parts = timeStr.split(':');
                const hours = parseInt(parts[0]) || 0;
                const minutes = parseInt(parts[1]) || 0;
                return hours * 60 + minutes;
            }

            function minutesToTime(totalMinutes) {
                if (isNaN(totalMinutes) || totalMinutes < 0) return '00:00';
                const hours = Math.floor(totalMinutes / 60);
                const minutes = totalMinutes % 60;
                return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
            }

            function calculateAndUpdateTotals() {
                const transferredHoursStr = document.getElementById('transferredHours').textContent;
                const dailyHoursStr = dailyHoursInput.value;
                const transferredHoursMinutes = timeToMinutes(transferredHoursStr);
                const dailyHoursMinutes = timeToMinutes(dailyHoursStr);
                const totalHoursMinutes = transferredHoursMinutes + dailyHoursMinutes;
                document.getElementById('totalHours').textContent = minutesToTime(totalHoursMinutes);

                const transferredEngineHoursStr = document.getElementById('transferredEngineHours').textContent;
                const dailyEngineHoursStr = dailyEngineHoursInput.value;
                const transferredEngineHoursMinutes = timeToMinutes(transferredEngineHoursStr);
                const dailyEngineHoursMinutes = timeToMinutes(dailyEngineHoursStr);
                const totalEngineHoursMinutes = transferredEngineHoursMinutes + dailyEngineHoursMinutes;
                document.getElementById('totalEngineHours').textContent = minutesToTime(totalEngineHoursMinutes);

                const transferredPropellerHoursStr = document.getElementById('transferredPropellerHours').textContent;
                const dailyPropellerHoursStr = dailyPropellerHoursInput.value;
                const transferredPropellerHoursMinutes = timeToMinutes(transferredPropellerHoursStr);
                const dailyPropellerHoursMinutes = timeToMinutes(dailyPropellerHoursStr);
                const totalPropellerHoursMinutes = transferredPropellerHoursMinutes + dailyPropellerHoursMinutes;
                document.getElementById('totalPropellerHours').textContent = minutesToTime(totalPropellerHoursMinutes);

                const transferredFlightCount = parseInt(document.getElementById('transferredFlightCount').textContent);
                const dailyFlightCount = parseInt(dailyFlightCountInput.value) || 0;
                const totalFlightCount = transferredFlightCount + dailyFlightCount;
                document.getElementById('totalFlightCount').textContent = totalFlightCount;

                const transferredEngineCycles = parseInt(document.getElementById('transferredEngineCycles').textContent);
                const dailyEngineCycles = parseInt(dailyEngineCyclesInput.value) || 0;
                const totalEngineCycles = transferredEngineCycles + dailyEngineCycles;
                document.getElementById('totalEngineCycles').textContent = totalEngineCycles;

                const transferredLandingCount = parseInt(document.getElementById('transferredLandingCount').textContent);
                const dailyLandingCount = parseInt(dailyLandingCountInput.value) || 0;
                const totalLandingCount = transferredLandingCount + dailyLandingCount;
                document.getElementById('totalLandingCount').textContent = totalLandingCount;

                updateTotalBoxColors();
            }

            function updateTotalBoxColors() {
                const boxes = [
                    {input: dailyHoursInput, total: document.getElementById('totalHours')},
                    {input: dailyEngineHoursInput, total: document.getElementById('totalEngineHours')},
                    {input: dailyPropellerHoursInput, total: document.getElementById('totalPropellerHours')},
                    {input: dailyFlightCountInput, total: document.getElementById('totalFlightCount')},
                    {input: dailyEngineCyclesInput, total: document.getElementById('totalEngineCycles')},
                    {input: dailyLandingCountInput, total: document.getElementById('totalLandingCount')}
                ];
                boxes.forEach(item => {
                    if (item.input.value.trim() !== '') {
                        item.total.classList.add('green');
                    } else {
                        item.total.classList.remove('green');
                    }
                });
            }

            const highlightInputs = [
                dailyHoursInput, dailyEngineHoursInput, dailyPropellerHoursInput,
                dailyFlightCountInput, dailyEngineCyclesInput, dailyLandingCountInput
            ];

            highlightInputs.forEach(input => {
                const label = document.querySelector(`label[for="${input.id}"]`);
                input.addEventListener('input', () => {
                    if (input.id === 'daily-hours-input') {
                        dailyEngineHoursInput.value = input.value;
                        dailyPropellerHoursInput.value = input.value;
                    }

                    if (input.value.trim() !== '') {
                        input.classList.add('filled');
                        if (label) {
                            label.classList.add('filled');
                        }
                    } else {
                        input.classList.remove('filled');
                        if (label) {
                            label.classList.remove('filled');
                        }
                    }

                    calculateAndUpdateTotals();
                    checkFormValidity();
                });
            });

            document.querySelectorAll('#second-modal-content input, #second-modal-content select').forEach(field => {
                field.addEventListener('change', checkFormValidity);
                if (field.id.includes('hours-input')) {
                    field.addEventListener('blur', (event) => {
                        const regex = /^(?:[0-9]{1,2}:[0-5][0-9])|$/;
                        if (!regex.test(event.target.value) && event.target.value.trim() !== '') {
                            alert('Saat formatı HH:MM şeklinde olmalıdır.');
                            event.target.focus();
                        }
                    });
                }
            });

            function handleSpecialMode() {
                const isSpecialModeActive = engineStartOnlyCheckbox.checked || frdsControlOnlyCheckbox.checked;

                if (isSpecialModeActive) {
                    if (engineStartOnlyCheckbox.checked) {
                        frdsControlOnlyCheckbox.checked = false;
                    }
                    if (frdsControlOnlyCheckbox.checked) {
                        engineStartOnlyCheckbox.checked = false;
                    }

                    fieldsets.forEach(fieldset => fieldset.classList.add('faded-fieldset'));
                    dailyInputs.forEach(input => {
                        input.disabled = true;
                        if (input.id.includes('hours')) {
                            input.value = '00:00';
                        } else {
                            input.value = '0';
                        }
                        const label = document.querySelector(`label[for="${input.id}"]`);
                        if (label) {
                            input.classList.add('filled');
                            label.classList.add('filled');
                        }
                    });
                } else {
                    fieldsets.forEach(fieldset => fieldset.classList.remove('faded-fieldset'));
                    dailyInputs.forEach(input => {
                        input.disabled = false;
                        input.value = '';
                        const label = document.querySelector(`label[for="${input.id}"]`);
                        if (label) {
                            input.classList.remove('filled');
                            label.classList.remove('filled');
                        }
                    });
                }
                calculateAndUpdateTotals();
                checkFormValidity();
            }

            engineStartOnlyCheckbox.addEventListener('change', handleSpecialMode);
            frdsControlOnlyCheckbox.addEventListener('change', handleSpecialMode);

            saveButton.addEventListener('click', () => {
                checkFormValidity();
                if (saveButton.disabled) {
                    alert('Lütfen tüm gerekli alanları doldurun.');
                    return;
                }

                const selectedModel = aircraftModelSelect.value;
                const selectedTailNo = connectedSelect.value;
                const date = dateInput.value;
                const dailyHours = dailyHoursInput.value;
                const totalHours = document.getElementById('totalHours').textContent;
                const dailyEngineHours = dailyEngineHoursInput.value;
                const totalEngineHours = document.getElementById('totalEngineHours').textContent;
                const dailyPropellerHours = dailyPropellerHoursInput.value;
                const totalPropellerHours = document.getElementById('totalPropellerHours').textContent;
                const dailyFlightCount = dailyFlightCountInput.value;
                const totalFlightCount = document.getElementById('totalFlightCount').textContent;
                const dailyEngineCycles = dailyEngineCyclesInput.value;
                const totalEngineCycles = document.getElementById('totalEngineCycles').textContent;
                const dailyLandingCount = dailyLandingCountInput.value;
                const totalLandingCount = document.getElementById('totalLandingCount').textContent;
                const engineStartDate = engineStartDateInput.value;
                const frdsControlDate = frdsControlDateInput.value;
                const missionLocation = missionLocationSelect.value;
                const aircraftStatus = aircraftStatusSelect.value;
                const nonOperationalStatus = nonOperationalStatusSelect.value;
                const personnelInfo = personnelInfoSelect.value;
                const rowId = rowIdInput.value;

                const formData = {
                    rowId: rowId,
                    model: selectedModel,
                    tailNo: selectedTailNo,
                    date: date,
                    dailyHours: dailyHours,
                    totalHours: totalHours,
                    dailyEngineHours: dailyEngineHours,
                    totalEngineHours: totalEngineHours,
                    dailyPropellerHours: dailyPropellerHours,
                    totalPropellerHours: totalPropellerHours,
                    dailyFlightCount: dailyFlightCount,
                    totalFlightCount: totalFlightCount,
                    dailyEngineCycles: dailyEngineCycles,
                    totalEngineCycles: totalEngineCycles,
                    dailyLandingCount: dailyLandingCount,
                    totalLandingCount: totalLandingCount,
                    engineStartDate: engineStartDate,
                    frdsControlDate: frdsControlDate,
                    missionLocation: missionLocation,
                    aircraftStatus: aircraftStatus,
                    nonOperationalStatus: nonOperationalStatus,
                    personnelInfo: personnelInfo
                };

                const webAppUrl = 'https://script.google.com/macros/s/AKfycbwnmLv-d-mh0eUOJrSrDFZtFgmQCZ9LeAVCnBQfkvTDMIATRoN43W7sc_cnViMdB8XTpw/exec';

                fetch(webAppUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                })
                .then(response => response.json())
                .then(data => {
                    let statusMessage = `Hava Aracı Durumu: ${aircraftStatus}`;
                    if (aircraftStatus === 'Gayrıfaal') {
                        statusMessage += `\nGayrıfaal Durum Nedeni: ${nonOperationalStatus}`;
                    }
                    const displayMessage = `
    Hava Aracı: ${selectedTailNo} (${selectedModel})
    Tarih: ${date}
    Günlük Uçuş Saati: ${dailyHours}
    Toplam Uçuş Saati: ${totalHours}
    Günlük Motor Saati: ${dailyEngineHours}
    Toplam Motor Saati: ${totalEngineHours}
    Günlük Pervane Saati: ${dailyPropellerHours}
    Toplam Pervane Saati: ${totalPropellerHours}
    Günlük Uçuş Sayısı: ${dailyFlightCount}
    Toplam Uçuş Sayısı: ${totalFlightCount}
    Günlük Motor Çalıştırma Sayısı: ${dailyEngineCycles}
    Toplam Motor Çalıştırma Sayısı: ${totalEngineCycles}
    Günlük İniş Sayısı: ${dailyLandingCount}
    Toplam İniş Sayısı: ${totalLandingCount}
    Son Motor Çalıştırma Tarihi: ${engineStartDate}
    En son FRDS kontrol Tarihi: ${frdsControlDate}
    Görev Yeri: ${missionLocation}
    ${statusMessage}
    Defteri dolduran personel: ${personnelInfo}
    `;
                    successMessage.textContent = displayMessage;
                    successModal.style.display = 'flex';
                })
                .catch(error => {
                    console.error('Hata:', error);
                    alert('Veri kaydedilirken bir hata oluştu. Lütfen tekrar deneyin.');
                });
            });

            okButton.addEventListener('click', () => {
                successModal.style.display = 'none';
                updateScreen.style.display = 'none';
            });

            downloadPdfButton.addEventListener('click', () => {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF('p', 'mm', 'a4');

                const pdfSource = document.getElementById('pdf-content-area');
                const selectedTailNo = document.getElementById('selected-tailno').textContent.replace('Seçilen Kuyruk Numarası: ', '');

                saveButton.style.display = 'none';

                const options = {
                    scale: 2,
                    useCORS: true,
                    backgroundColor: '#ffffff'
                };

                html2canvas(pdfSource, options).then(canvas => {
                    const imgData = canvas.toDataURL('image/png');
                    const imgWidth = 210;
                    const pageHeight = 295;
                    const imgHeight = (canvas.height * imgWidth) / canvas.width;
                    let heightLeft = imgHeight;
                    let position = 0;

                    doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;

                    while (heightLeft >= 0) {
                        position = heightLeft - imgHeight;
                        doc.addPage();
                        doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                        heightLeft -= pageHeight;
                    }

                    doc.save(`Faydali_Saat_Raporu_${selectedTailNo}.pdf`);

                    saveButton.style.display = '';
                    successModal.style.display = 'none';
                    updateScreen.style.display = 'none';
                }).catch(error => {
                    console.error("PDF oluşturulurken hata oluştu:", error);
                    alert("PDF oluşturulurken bir hata oluştu. Lütfen tekrar deneyin.");
                    saveButton.style.display = '';
                    successModal.style.display = 'none';
                    updateScreen.style.display = 'none';
                });
            });
        });
    </script>
</body>
</html>
